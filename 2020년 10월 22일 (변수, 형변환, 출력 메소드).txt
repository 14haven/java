2020년 10월 22일

어제 했던 것 간단히 정리 + 변수


1. 자바 개발 환경 구축
 - JDK 설치
 - Eclipse 설치
 - JAVA 온라인 컴파일러
	별도의 자바 개발환경을 구축하지 않고 간단하게 코드 테스트 할 수 있는 사이트
	https://www.jdoodle.com/online-java-compiler/

2. 자바 개발 준비
 - 이클립스 실행
 - 프로젝트 생성
 - 패키지 생성
 - 클래스 생성
 - 클래스 파일 안에 메인 메소드 작성

3. 주석
 - 프로그램에 포함되지 않는 설명
 - 한줄 주석 : //
 - 범위 주석 : /* */

4. 자료형
 - 컴퓨터는 모든 데이터를 0과 1로 처리하기 때문에 어떤 데이터를 입력해도 모두 0과 1로 저장됨
 - 0과 1로 이루어진 데이터를 어떻게 해석할지를 알려줘야 함
 - 똑같이 저장되어 있어도 해석하는 방식에 따라 다르게 표현 됨		
 - 예제) 기계어(2진수) : 01000001 을 다양한 방법으로 표현
	- 2진수를 자바에서 표현할 때는 숫자 앞에 0b를 붙여 줌 
		System.out.println(0b01000001);	// 결과 : 65
		System.out.println((double)0b01000001);	// 결과 : 65.0
		System.out.println((char)0b01000001);	 // 결과 : A
		
 - 정수
	byte : 1byte 크기로 정수 표현
	short : 2byte 크기로 정수 표현
	int : 4byte 크기로 정수 표현
	long : 8byte 크기로 정수 표현
	자료형을 따로 명시해 주지 않으면(리터럴) 정수형은 기본 int형을 사용
	long 타입의 변수를 초기화 할 때는 정수값 뒤에 (소문자)l 또는 (대문자)L을 붙여야 함

		System.out.println(100);	//데이터 형태를 보고 정수로 판단
		System.out.println(3.5);	//데이터 형태를 보고 실수로 판단
		System.out.println((int)3.5);	// 실수를 정수로 바꿔서 표현
		System.out.println('A');	//데이터 형태를 보고 단일문자로 판단
		System.out.println((int)'A');	//단일문자를 정수로 바꿔서 표현
		
 - 실수
	float : 4byte 크기로 실수 표현
	double : 8byte 크기로 실수 표현
	자료형을 따로 명시해 주지 않으면(리터럴) 실수형은 기본 double형을 사용

		System.out.println(5.6);	// 데이터 형태를 보고 실수로 판단
		System.out.println(20);	// 데이터 형태를 보고 정수로 판단
		System.out.println((double)20);	// 정수를 실수로 바꿔서 표현
		System.out.println('C');	// 데이터 형태를 보고 단일문자로 판단
		System.out.println((double)'C');	// 단일문자를 실수로 바꿔서 표현
		
 - 단일문자
	char : 2byte 크기로 단일문자를 표현
	java는 모든 문자를 유니코드로 처리하기 때문에 2byte의 크기를 가짐
		0 ~ 127까지는 아스키 (ASCII) 문자(특수기호 및 영어 알파벳)가 할당되어 있고，44032 ~55203까지는 한글 11172자가 할당
		유니코드 공식 사이트 : http://www.unicode.org
			메인페이지 맨 아래 -> Code Charts -> ASCII Characters(아스키코드표), Hangul Syllables(한글)
			Ctrl + f 로 원하는 문자 찾아서 16진수 코드값 볼 수 있음
	char형 자료형은 정수타입이기 때문에 정수값을 입력할 경우 해당되는 유니코드 값의 문자가 저장됨
	단일문자는 싱글쿼터(' ')를 이용해 표현

		System.out.println('J');	// 데이터 형태를 보고 단일문자로 판단
		System.out.println(100);	// 데이터 형태를 보고 정수로 판단
		System.out.println((char)100);	// 정수를 단일문자로 바꿔서 표현
		System.out.println(65.6);	// 데이터 형태를 보고 실수로 판단
		System.out.println((char)65.6);	
						// 실수를 단일문자로 바꿔서 표현(소수점 뒤자리 버림)
		System.out.println((char)0xc815);	// 정
		System.out.println((char)0xc720);	// 유
		System.out.println((char)0xbbf8);	// 미

 - 문자열
	String 클래스 사용(참조변수)
	문자열은 더블쿼터(" ")를 이용해 표현
	다른 데이터 타입과 처리 방식이 달라서 강제 형변환 사용 불가능
	예제는 뒤에 변수 배운 뒤 활용

		System.out.println("Hello");	//데이터 형태를 보고 문자열로 판단

 - 논리
	boolean : 1byte 크기로 참과 거짓을 표현
	true 나 false 값만 저장가능
	강제 형변환 사용 불가능

		System.out.println(true);	//데이터 형태를 보고 Boolean형으로 판단
		System.out.println(false);	//데이터 형태를 보고 Boolean형으로 판단

 - 자료형 크기 알아오기(bit단위)
	자료형Wrapper.SIZE
	String, Boolean은 안됨
	int = Integer , char = Character , 나머지는 자료형 첫글자만 대문자로 사용

		System.out.println(Byte.SIZE);
		System.out.println(Short.SIZE);
		System.out.println(Integer.SIZE);
		System.out.println(Long.SIZE);
		System.out.println(Float.SIZE);
		System.out.println(Double.SIZE);
		System.out.println(Character.SIZE);



byte 명시적으로 부호 여부를 지정할 수 있다.
-128 ~ 127

부호가 없는 정수로 사용하면 0부터 255까지 양의 정수로 사용 가능

음수로 표현하려면? 제일 앞 한개 비트를 빼서 부호 비트로 쓴다.
0000 0000
      ~
1111 1111 (맨 앞자리의 0과 1을 부호비트로 사용)

0 일때는 양수
1 일때는 음수

+1을 표현할 때 0000 0001
-1을 표현할 때 1000 0001

+1 -1 을 연산하면 0이 나와야 하는데 그냥 연산하면 0이 나오지 않는다.
그러기 위해서는 보수를 이용하여 음수를 표현해줘야 한다.


음수로 바꿀 땐 보수로 바꿔줘야 한다. (-1을 나타내기 위해서는)
1의 보수 = 반대로 뒤집는 것
2의 보수 = 1의 보수 + 1

0000 0001을 1의 보수로 바꿔준다.
= 1111 1110
1111 1110을 또 2의 보수로 바꿔준다.
1111 1111

1111 1111과 1000 0001을 더하면

   0000 0001  (+1)
+ 1111 1111  (-1)
--------------
  10000 0000
맨 앞자리의 1은 버리므로 결과는 0이 된다.


----------------------------------------------------------------------------------------



다른 형태의 데이터를 내가 원하는 데이터 형으로 바꿔서 표현하는 것을 형변환이라고 한다.
값의 자료형을 바꾸는 것

논리형과 문자열은 형변환 불가능
문자열은 처리하는 방식이 완전히 다르기 때문에 문자열은 형태를 강제로 변환시킬 수 없다.
boolean 같은 경우는 특수한 형태 (true, false) 이므로 마찬가지로 형변환 불가능하다.


문자열은 String 이라는 클래스 객체를 이용해서 표현한다.

---------------------------------------------------------------------------------------


5. 변수
 - 변할 수 있는 값이 저장되는 공간 (10 저장했다가 나중에 10 버리고 20 저장할 수도 있는.)
 - 데이터를 저장하기 위해 메모리에 공간을 할당해서 이름을 붙여 놓고 사용하는 것
 - 프로그램에 의해 수시로 값이 변동 될 수 있음
 - 하나의 변수에는 한번에 하나의 값만 저장 가능
 - 변수 타입에 맞는 값만 저장 가능


RAM = 메모리 = 주기억장치
(변수 공간) 공간을 만들 때 알려줘야 하는 것.
1. 크기
2. 공간에 어떤 데이터를 사용할 건지 = 데이터형태
=> 두 개를 한 번에 알려줄 수 있는 것 = 자료형

자료 공간은 알겠는데 어디에 저장돼있는지 모르겠네?

메모리라는 공간에는 1byte단위로 해서 주소를 만들어 놓았음
공간 만들어줘 하면 컴퓨터가 알아서 공간 만들고 주소 만듬

문제는 주소가 4byte 크기의 16진수로 돼있음 (ex. 00F263C6)
주소 부르는 것을 편하게 하기 위해서 사람이 이름을 붙임



 - 변수 선언
	공간을 만들어 주세요 라고 요청하는 것이 변수 선언
	메모리 공간에 데이터를 저장할 수 있는 공간을 할당하는 것
	변수를 사용하기 전에 미리 할당을 받아야 사용 가능
	공간의 크기, 데이터 타입, 이름을 알려줘야 함
	공간의 크기 + 데이터 타입 = 자료형으로 알려줌
	변수이름은 메모리 주소에 붙여진 이름
	변수 명명 규칙에 따라 이름 지정
		첫 번째 글자는 문자나 $ , _ 만 가능(숫자로 시작 불가능)
		영어 대소문자 구분됨
		자바 예약어는 변수이름으로 사용 불가능 (int, main, double 등등)
		길이의 제한은 없음
		되도록 소문자로 지정하되 두 단어 이상 연결될 경우 새로운 단어의 첫 문자를 대문자로 지정
		되도록 의미 있는 이름으로 지정
		한글도 사용 가능하지만 되도록 쓰지 않는 것이 좋음
	변수 선언 방법 : 
		자료형 변수명;
		ex) int num; // 4byte크기의 정수를 저장하는 공간을 만들어서 이름을 num으로 지정
	같은 타입의 변수는 콤마( , ) 를 이용해 한번에 여러 개 선언 가능
		자료형 변수명, 변수명, 변수명, ...;
		ex) int num1, num2, num3; // 4byte크기의 정수를 저장하는 공간을 3개 만들어서 이름을 각각 num1, num2, num3으로 지정

 - 변수 사용
	선언된 변수 공간에 값을 저장하거나 저장된 값을 읽는 것
	변수 안에 데이터를 저장하거나 저장된 데이터를 가져다 쓰는 것
	데이터를 저장할때는 = 대입연산자를 사용한다

 - 변수 값 대입
	[num = 10; 
	num이라는 변수에 10이라는 데이터를 대입해주세요.
	대입연산자는 오른쪽의 결과 값을 왼쪽으로 넣어주세요 라는 뜻임

	num = 10 + 20; 연산이 있는 경우에는 연산 다 한다음에 결과 값을 넣어준다
	30이라는 값이 대입됨

	처음에 공간을 만들기만하면 값이 들어있지 않기 때문에 사용 불가능하다.
	값을 넣은 이후부터 사용 가능하다.

	하나의 변수에는 하나의 값만 들어간다.
	다른 값을 넣으면 덮어써서 다른 값으로 바뀐다.]
	
	변수에 값(데이터)를 입력하는것
	대입연산자( = ) 사용
	하나의 변수에는 한번에 하나의 데이터만 저장 가능(새로운 데이터를 넣으면 이전 데이터는 사라짐)
	변수 선언 시 지정한 타입의 데이터만 저장 가능
	변수 값 대입 방법 : 
		변수 선언과 동시에 값 대입(초기값)
			자료형 변수명 = 데이터;
			ex) int num = 10; // 4byte 크기의 정수를 저장하는 공간을 만들어서 이름을 num으로 지정하고 10을 저장
		변수 선언 후 변수 이름만 불러서 값 대입
			주의 : 변수명 앞에 자료형 붙이면 변수 선언이 됨!!
			변수명 = 데이터;
			ex) num = 10; // num이라는 이름의 변수에 10을 저장		
 - 변수 값 읽기
	변수 공간에 저장된 값을 읽어 오는 것
	선언 후 값이 들어있는 변수만 읽을 수 있음
	값을 사용하기 원하는 곳에서 변수 이름을 불러서 사용 가능
	변수를 사용하는 시점에 변수공간에 저장된 값이 사용됨
	변수 사용 방법 : 
		int num = 10; // num 변수 선언 및 값 대입
		System.out.println(num); // num 변수에 저장된 값을 화면에 출력 - 10
		num = 20; // num 변수에 새로운 값 대입
		System.out.println(num); // num 변수에 저장된 값을 화면에 출력 - 20
 - 변수 기본 실습
		// 변수 선언
		int num;
		// 변수 사용 - 값 대입
		num = 10;
		// 변수 사용 - 값 읽기
		System.out.println(num);	// 10
		
		num = 10+20;
		System.out.println(num);	// 30
		
		// 변수 선언 후 바로 값 대입(초기값)
		int num2 = 20;
		// 여러개의 변수 동시에 선언(같은 자료형만 가능)
		int num3, num4, num5;
		// 여러기의 변수 동시에 선언 후 바로 값 대입(초기값)
		int num6, num7 = 40, num8 = 50;
		
		// 변수값을 다른 변수에 대입
		int num9 = 10;
		int num10 = num9;
		
		// 변수값을 이용해 연산 후 다시 대입
		int num11 = 100;
		System.out.println(num11);	// 100
		num11 = num11 + 1;
		System.out.println(num11);	// 101
		
		// 데이터 타입에 따른 변수 선언
		byte num01 = 100; //1byte 크기의 정수형태 공간
		System.out.println("num01변수 값 : "+num01);	// 100
		short num02 = 10000; //2byte 크기의 정수형태 공간
		System.out.println("num02변수 값 : "+num02);	// 100000
		int num03 = 100000000; // 4byte 크기의 정수형태 공간
		System.out.println("num03변수 값 : "+num03);	// 100000000
		long num04 = 10000000000L;	
			// 코드에 입력된 정수는 4byte로 처리되기 때문에 숫자 뒤에 L을 붙여서 8byte로 처리
		System.out.println("num04변수 값 : "+num04);	// 10000000000

[long num04 = 10000000000; 대입하면 에러뜸
long은 8바이트인데 100000000은 4바이트의 정수형으로 인식해서
공간은 8바이트인데 숫자가 정수형이기 때문에 일단 int형으로 인식됨

해결방법: 맨 뒤에 엘(L) 붙여주기
long num04 = 10000000000L;


float num05 = 3.5;
3.5가 double 형으로 저장돼서 에러가 됨
double은 8바이트 float은 4바이트
4바이트를 8바이트로 변경하는 건 돼서 캐스팅 가능

해결방법: 앞에 (float) 붙여주거나 맨 뒤에 에프(F) 붙여주기
float num05 = 3.5F]


----------------------------------------------------------------------------------------


전체 프로젝트에 메인메소드는 1개만 있어야 한다.
( 여러개가 있는 경우 하나만 빼고 다른 메인메소드는 주석처리 해야 한다.)
각 클래스에 메인메소드가 하나씩 있어도 실행되는 이유는? 
그 클래스만 시행한거라서, 전체 프로젝트를 실행 한게 아니라.
클래스 별로 하나하나 실행이 된다.

=> 객체지향의 특징



-------------------------------------------------------------------


String은 일반적인 자료형이 아니라 클래스이다.

데이터가 어떤 형태인지 생각을 하고 자료형을 선택

----------------------------------------------------------------------

- 변수 사용 영역
	변수는 선언된 블록 내에서만 사용 가능
	선언된 블록: {}
	메소드 내에 선언된 변수를 로컬 변수라고 부름

	    int var1 = 10; 
	    System.out.println(var1); // 10 정상 출력
	    {	// 새로운 블록
	    	int var2 = 20;
	    	System.out.println(var1);  // var1은 출력될까? 10 정상 출력
	    	System.out.println(var2);  //  20 정상 출력
	    	// 자기 영역에서 var1을 찾아보고 없으면 main에서 var1을 찾는다.
	    }
		//System.out.println(var2); // 에러 뜸, 영역을 벗어나는 순간 var2 못찾음
	    
	}


상수
- 변할 수 없는 값이 저장되는 공간
- 리터럴 상수
	코드에 직접 입력되는 데이터 값
	변수에 대입되는 값 자체
	int num = 10; 	// 10이라는 값이 리터럴 상수
	System.out.println("Hello"); // "Hello"라는 문자열이 리터럴 상수


리터럴 = 상수의 종류 중 하나
상수 = 변하지 않는 수가 들어가는 공간
이름이 없는 상수
데이터를 입력받아서 출력하기 위해서는 저장을 해야하기 때문에
컴퓨터가 필요에 의해 만들었다가 알아서 없애는 수


final 상수
변수를 상수화해서 사용한다.
우리가 저장하는 것
final int AGE;
int AGE; 만 있으면 변수 선언인데 앞에 final 붙이면 상수가 됨
선언하면서 초기값을 넣어줘야하고 선언한 후에는 값을 변경할 수 없다.
이렇게 사용하는 이유: 값을 변수에 담기는 담는데 프로그램 실행 중에 절대 못바뀌게 하기 위해 상수화
초기화하고 나서 변수의 값을 넣으려고 하면 오류가 발생한다.



