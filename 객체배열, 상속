2020년 11월 4일

- 객체배열
	많은 수의 객체를 배여로 관리하는 것
	배열의 자료형을 클래스명(사용자 정의 자료형)으로 지저하여 활용

	예) Student 클래스로 만든 객체들 학생1, 학생2 ... 을 배열로 묶음
	Student[] st = new Student[5]
 	학생1, 학생2, 학생3, 학생4, 학생5를 st라는 이름의 객체배열로 묶었다.


	- 객체배열 선언
	클래스명[] 배열명;	ex) Academy[] arr;
	클래스명 배열명[];       Academy arr[];

	- 객체배열 할당
	배열명 = new 클래스명[배열크기];	ex) arr = new Academy[5];

	- 객체배열 선언과 동시에 할당
	클래스명 배열명[] = new 클래스명[배열크기];
	 ex) Academy[] arr = new Academy[5];

	

	- 객체배열 초기화
	* 인덱스를 이용한 초기화
	배열명[i] = new 클래스명();
	ex) arr[0] = new Academy(1,"KH정보교육원");
	    arr[1] = new Academy(2,"케이에이치");
	Academy라는 클래스를 만들면서 생성자를 입력값 2개 받도록 만들었을 때


	* 선언과 동시에 할당 및 초기화
	클래스명 배열명[] = {new 클래스명(),new 클래스명()};
	ex) Academy arr[] = {new Acadmey(1, "KH정보교육원"), new Academy(2,"케이에이치")}


라이브러리 클래스

public class ObjectArrayExam01 {
	public String name;
	public int age;
	
	public void inform() {
		System.out.println("객체 메소드");
	}


실행 클래스

public class Run {

	public static void main(String[] args) {
			// 일반 변수 선언하고 할당하는 법
				// 자료형 변수명  = 값;
				int num = 10;
				num = 20;
			// 일반 배열 선언하고 할당하는 법
				// 자료형 [] 배열명 = new 자료형[크기];]
				int [] arr;
				arr = new int[5];
				arr[0] = 10;
				// arr - 참조변수, 참조변수의 주소를 따라가면 실제 정수형 공간이 5개 있음
			// 객체
				// 클래스명 객체명 = new 클래스명();
				ObjectArrayExam01 oae = new ObjectArrayExam01();
				oae.name = "홍길동";
				// oae - 참조변수, 참조변수의 주소를 따라가면 실제 객체 공간 1개가 있음
					// 객체 공간 안에 여러 멤버들이 있음
			// 객체 배열
				// 클래스명[] 객체배열명 = new 클래스명[크기];
				ObjectArrayExam01 [] oaeArr ; // 참조변수1(객체배열의 참조변수)을 만듬
				oaeArr = new ObjectArrayExam01[5]; // 참조변수2(객체의 참조변수)를 5개 만들어라 , 아직 객체를 5개 만든건 아님
				// oaeArr - 참조변수1, 참조변수1의 주소를 따라가면 객체의 주소를 저장하는 참조변수2 공간 5개
					// 참조변수2의 주소를 따라가면 실제 객체공간 1개가 있음
				oaeArr[0] = new ObjectArrayExam01(); // 실제 객체 생성
				oaeArr[0].name = "김길동";
				oaeArr[0].inform();
				
				// 초기값
				int [] arr2 = {10, 20 ,30};
				ObjectArrayExam01 [] oaeArr2 = {new ObjectArrayExam01(), new ObjectArrayExam01()};
				
				int [] arr3 = new int[] {10,20,30};
				ObjectArrayExam01 [] oaeArr2 = new ObjectArrayExam01[] {new ObjectArrayExam01(), new ObjectArrayExam01()};
				
	}

}


------------------------------------------------------------------------

- 상속
	다른 클래스가 가지고 있는 멤버(필드,메소드)들을 새로 작성할 클래스에서
	직접 만들지 않고 상속을 받음으로써 새 클래스가 자신의 멤버처럼 사용할 수 있는 기능


	물려주는 Class-> 부모 클래스 = 상위 클래스 , Base 클래스 , Super 클래스
	물려받는 Class-> 자식 클래스 = 파생 클래스 , Sub 클래스
	자식이 부모를 선택한다.



- Is a 상속
	일반적인 의미의 상속

	"A는 B다"라는 뜻
	예시) 학생은 사람이다. / 사과는 과일이다. / 토끼는 동물이다.
	역으로는 성립되지 않음

	더 큰 개념이 부모 클래스가 된다.
	

- Has a 상속
	"A Has a B"
	"A는 B를 포함 한다" 라는 뜻
	포함관계의 상속
	예시) 교실엔 책상이 있다. / 숲엔 나무가 있다. / 사람이 폰을 가지고 있다.
	책상은 교실이다 -> X 
	나무는 숲에 포함된다 -> O
	교실이라는 클래스 안에서 책상이라는 클래스를 가지고 와서 객체를 생성한다.
	특정 클래스가 다른 클래스의 부속품이 되는 경우

	밖에 있는 클래스, 포함 시켜주는 클래스 -> Control Class
	포함 되는 클래스 -> Entity Class
	포함되는 class의 객체를 멤버 변수로 선언 (필드에 들어가야한다)



- 상속의 특징 (Is a 상속)

	1. 모든 클래스는 Object 클래스의 후손 
	 Object 클래스 -> 최상위 클래스
	 Object 클래스가 제공하는 메소드를 오버라이딩하여 메소드 재구현 가능
	 ex) java.lang.String 클래스의 equals()와 toString()


	2. 부모클래스의 생성자, 초기화 블록은 상속 안 됨
	 자식 클래스 생성 시, 부모 클래스 생성자가 먼저 실행
	 자식 클래스 생성자 안에 부모 클래스 생성자를 호출하고 싶으면 super() 활용

	3. 부모의 private 멤버는 상속은 되지만 직접 접근 불가
	 자식 객체 생성 시에 부모의 필드 값도 전달 받은 경우,
	 자식 생성자 안에서 부모의 private 필드에 직접 접근하여 대입 불가
	 super() 이용하여 전달받은 부모 필드 값을 부모 생성자 쪽으로 넘겨 생성하거나
	 setter, getter 메소드를 이용하여 접근

 	4. 자식에게 부모클래스는 하나만 가능하다.

	5. 접근제한자를 protected로 하면 자식 클래스가 마음대로 사용할 수 있다.


- 상속 방법 (Is a 상속)
	클래스 간의 상속 시에는 extends 키워드 사용

- 상속 표현식
	[접근제한자] class 클래스명 extends 클래스명{}
	
	public class Academy extends Company {}
	Academy 학원 -> 자식 클래스
	Company 회사 -> 부모 클래스

	

- 단일 상속과 다중 상속
	* 단일 상속(Single Inheritance)
	클래스간의 관계가 다중 상속보다 명확하고 신뢰성 있는 코드 작성
	자바에서는 다중 상속 미지원 -> 단일 상속만 지원
	
	* 다중 상속(Multiple Inheritance)
	C++에서 가능한 기능으로 여러 클래스로부터 상속을 받으며
	복합적인 기능을 가진 클래스를 쉽게 작성 가능

