2020년 10월 23일


어제 했던 것 복습
- 자료형 (논리형, 문자, 숫자)
- 변수 (변수 선언, 변수 사용, 변수 선언 방법 등)
- 상수 (리터럴 상수는 컴퓨터가 알아서 저장했다가 삭제하는 상수)
- 출력메소드 ( System.out이라는 패키지 안에 들어있는 print메소드, println메소드, printf메소드)
  
----------------------------------------------------------------------

9. 입력 클래스(Scanner)

- 사용자로부터 입력되는 정수, 실수, 문자열을 처리하는 클래스
- JAVA 표준 라이브러리에 포함된 Scanner 클래스 사용
- Scanner 클래스 import (사용할게요 하고 선언하는 것)
	import java.util.Scanner; 
	jave 안에 util 안에 Scanner가 들어가 있음
	java.util이라는 패키지 안에
 - Scanner 생성 (일하는 놈 생성)
	Scanner 객체명 = new Scanner(System.in);
	(System.in)은 키보드로 입력을 받겠다는 것
	클래스라는 사용자 자료형
	Scanner라는 형태로 이런 이름 가진 놈 만들겠다.
	String 변수명 ;은 실제로 저장하는 공간이 생기는데 ex) 티비 버튼을 직접 누르는 것
	Scanner 객체명은 리모컨같은 조종하는 것이 생기는 것 ex) 리모컨으로 조종하는 것

	new Scanner(System.in);은 리모컨을 만든 것
- 입력받기 (일 시키기)
	정수 입력: 객체명.nextInt(); (정수 형태로 입력 받아와)
	실수 입력: 객체명.nextFloat(); (실수 형태로 입력 받아와)
	실수 입력: 객체명.nextDuble();
	문자열 입력: 객체명.next(); // 공백(탭, 스페이스) 전까지 입력되는 데이터 저장
	문자열 입력: 객체명.nextLine(); // 엔터 전까지 입력되는 데이터 저장
	
	   	 // Scanner 생성
		Scanner scan = new Scanner(System.in);
		(scan 말고 다른 이름 넣어도 됨)
	
	    	// 정수 입력 받기
		int num1; // 정수 형태로 입력 받을 거니까 정수형태 변수 만들어줌
		System.out.print("정수를 입력하세요: ");
		num1 = scan.nextInt(); 
		System.out.println("입력값: "+num1);

		// 실수 입력받기
		System.out.print("실수를 입력하세요: ");
		float num2; // 실수 형태로 입력 받을 거니까 실수형태 변수 만들어주기
		num2 = scan.nextFloat();
		System.out.println("입력값: "+num2);
		System.out.print("실수(double)를 입력하세요: ");
		double num3;
		num3 = scan.nextDouble();
		System.out.println("입력값: "+num3);
		
		// 문자열 입력
		// scan.next();  공백을 기준으로 입력을 받음 a b 입력하면 a만 출력됨
		System.out.print("문자열을 입력하세요: ");
		String str1; // 문자열 형태로 입력 받을 거니까 문자열 형태 변수 만들어주기
		str1 = scan.next();
		System.out.println("입력값: "+str1);
		System.out.print("문자열을 입력하세요: ");
		String str2;
		scan.skip("[\\r\\n]+"); // 스캔아 \\r\\n (엔터)가 있으면 넘어가라  []+은 스킵의 문법
		//scan.nextLine(); // 엔터 없애기
		str2 = scan.nextLine();
		System.out.println("입력값: "+str2);
		
		next, nextFloat, nextDouble -> nextLine 순으로 하면 문제가 발생한다
		이유: next, nextFloat, nextDouble 끝나고 친 엔터때문에 nextLine이 엔터를 인식해서 문제 발생
		해결방법:  
		1. scan.nextLine(); 중간에 넣어줘서 엔터를 없앤다.
		2. scan.skip("[\\r\\n]+"); // 스캔아 \\r\\n(엔터) 가 있으면 넘어가라 , []+은 스킵의 문법
		   \r 줄의 가장 앞으로 커서 이동 
		   \n 줄의 다음 줄로 커서 이동


	## 이름, 나이, 전화번호를 입력받아서 출력
	이름: (입력) 
	나이: (입력) 
	전화번호: (입력) 
	제 이름은 ??이고, 나이는 ??이고, 전화번호는?? 입니다.
		Scanner scan = new Scanner(System.in);
		
		System.out.print("이름: ");
		String name = scan.next();
		System.out.print("나이: ");
		int age = scan.nextInt();
		System.out.print("전화번호: ");
		String tel = scan.next();
		System.out.printf("제 이름은 %s이고, 나이는 %d이고, 전화번호는 %s 입니다", name,age,tel);
		// System.out.println("제 이름은"+name+"이고, 나이는"+age+"이고, 전화번호는"+tel+"입니다.");
		
		또는
		System.out.print("이름: ");
		String name = scan.nextLine();
		System.out.print("나이: ");
		int age = scan.nextInt();
		System.out.print("전화번호: ");
		scan.skip("[\\r\\n]+");
		String tel = scan.nextLine();

----------------------------------------------------------------------

실습 문제 (+문제 추가하기)


import java.util.Scanner;

Scanner scan = new Scanner(System.in); // Scanner라는 클래스를 이용해서 scan을 만들어준다
		
		// 실습 1번
		// 문제: 이름, 성별, 나이, 키를 사용자에게 입력 받아 각각의 값을 변수에 담고 출력하세요.
		
	            System.out.print("이름을 입력하세요: ");
		String name = scan.next(); //입력 받은 내용을 어디에 저장을 해야 사용가능 -> 변수 만들어주고 이름 지어주기
		System.out.print("성별을 입력하세요(남/여): ");
		//String sex = scan.next();
		char sex = scan.next().charAt(0); //앞에 한글자 받겠다
		System.out.print("나이를 입력하세요: ");
		int age = scan.nextInt();
		System.out.print("키를 입력하세요(cm): ");
		Double height = scan.nextDouble();
		System.out.println("키 "+height+"cm인 "+age+"살 "+sex+"자 "+name+"님 반갑습니다^^");
		
		
		//실습 2번
		// 문제: 키보드로 정수 두 개를 입력 받아 두 수의 합,차,곱,나누기한 몫을 출력하세요.
		System.out.print("첫 번째 정수: ");
		int num1 = scan.nextInt();
		System.out.print("두 번째 정수: ");
		int num2 = scan.nextInt();
		System.out.println("더하기 결과 :"+(num1+num2));
		System.out.println("빼기 결과: "+(num1-num2));
		System.out.println("곱하기 결과: "+(num1*num2));
		System.out.println("나누기 결과: "+(num1/num2));
		
		
		//실습 3번
		// 문제: 키보드로 가로, 세로 값을 실수형으로 입력 받아 사각형의 면적과 둘레를 계산하여 출력하세요.
		// 계산 공식) 면적: 가로*세로, 둘레:(가로+세로)*2
		
		System.out.print("가로: ");
		Double num1 = scan.nextDouble();
		System.out.print("세로: ");
		Double num2 = scan.nextDouble();
		System.out.println("면적: "+(num1*num2));
		System.out.println("둘레: "+(num1+num2)*2);

		
		//실습 4번
		// 문제: 영어 문자열 값을 키보드로 입력 받아 문자에서 앞에서 세 개를 출력하세요.

		System.out.print("문자열을 입력하세요: ");
		String str = scan.next();
		System.out.println("첫 번째 문자:" + str.charAt(0));
		System.out.println("두 번째 문자:" + str.charAt(1));
		System.out.println("세 번째 문자:" + str.charAt(2));


		
----------------------------------------------------------------------

연산자
- 연산자(Operator)
	연산에서 사용되는 표시나 기호

- 연산
	프로그램에서 데이터를 처리하여 결과를 도출하는 것
- 피연산자
	연산에 사용되는 데이터 (항이라고도 부른다)
- 연산식
	연산자와 피연산자를 이용해서 연산과정을 기술한 것
	

- 규칙
	연산식은 반드시 하나의 결과 값을 산출한다.
	여러 개의 연산자가 하나의 연산식에 올 경우 연산자 우선순위에 따라 연산한다.
	동일한 우선순위를 가질 경우 왼쪽에서 오른쪽으로 연산한다. 
	(단, 단항/대입 연산자 제외)

- 항의 개수에 따라 나뉘는 연산자(Operator)
	단항 연산자: 피연산자(항) 하나를 이용해 연산
	이항 연산자: 피연산자(항) 두개를 이용해 연산 ex) +, *
	삼항 연산자: 피연산자(항) 세개를 이용해 연산


- 산술 연산자
	연산 방법과 우선 순위가 일반 수학과 동일
	+: 더하기 , -: 빼기, *: 곱하기, /:나누기의 몫 구하기, %: 나누기의 나머지 구하기

- 복합 대입 연산자
	다른 연산자와 대입 연산자가 결합한 것으로
	자기 자신과 연산 후 결과를 자기 자신에게 누적 대입
	a += 10    =	a = a+10
	a -= 10    =	a = a - 10
	a *= 10    =	a = a * 10
	* 증감 연산과 비슷해 보이지만 증감연산자(++, --)는 1씩 증가
	  대입 연산자는 원하는 값을 증가시키고 그 변수에 저장 가능


- 증감 연산자 : ++,--
	피연산자의 값에 1을 더하거나 빼는 연산자
	위치에 따라 출력 값이 다르게 나타남

	전위 연산: 먼저 연산 후 다른 연산 실행 (++num) 
	후위 연산: 다른 연산 우선 실행 후 연산 (--num)


	int num1 = 10;
	int num2= ++num1 내 앞에 있으니까 나부터 증가할거야 10에 1증가 시킨 후 11 대입
	결과: num1, num2 모두 11이 됨
	int num2= num1++; ++이 뒤에 붙어있으니 맨 마지막에 1증가, 10을 먼저 num2에 넘겨주고 1증가시킴
	결과: num1은 여전히 10ㅇ이고 num2는 11이 됨


- 비교 연산자 (참인지 거짓인지)
	>, >=, <=, <. 왼쪽을 기준으로 읽는다
	두 피연산자의 값의 크기 비교
	기본형 boolean,참조형을 제외하고 나머지 자료형에 모두 사용 가능


	== 같다 , != 다르다
	데이터가 같은지, 다른지 비교할 때 쓰이며,
	비교 결과 값으로 항상 논리 값(true, false)이 나옴
	피연산자로 모든 자료형(기본형, 참조형) 사용 가능

	a == b  a와 b가 같으면 true
	a != b  a와 b가 다르면 true


- 논리 연산자 (논리 값 두개를 비교하는 연산자)
	&&: 두 피연산자가 모두 ture일 때 true 반환 (AND)
	||: 두 피연산자 중 하나만 ture여도 true 반환 (OR)
	&&가 ||보다 우선순위 높다.
	&& 먼저 연산하고 그 다음으로 || 연산한다.

- 논리 부정 연산자 : !
	논리 값을 부정하여 반대 값으로 변경
	제어문을 활용할 때 많이 쓰임
	
	무조건 반대로 만들어 주는 것
	(단항) !참 = 거짓 ,  !거짓 = 참

- 삼항 연산자 (조건부 연산자, 피연산자가 세 개)
	조건식 ? 식1 : 식2 ;
	조건식의 결과 값에 따라 연산을 처리하는 방식
	결과 값이 참일 경우 식1, 거짓일 경우 식2 실행
	삼항 연산자 안에 삼항 연산자를 중첩하여 쓰는 것도 가능

	int result1 = a > b ? a++ :b--;
	int result2 = a < b ? a++ : (b == 0 ? a-- : b++);
					거짓일 때 조건 한 번 더 비교


	
----------------------------------------------------------------------



