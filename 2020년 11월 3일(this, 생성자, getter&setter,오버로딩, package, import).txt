2020년 11월 3일

메소드를 실행해서 결과값을 받았다면
그 결과값으로 무엇을 할지도 적어야 한다.


- return
	1. 해당 메소드를 종료하고 자신을 호출한 메소드로 돌아가는 예약어
	2. 반환 값이 있다면 반환 값을 가지고 자신을 호출한 메소드로 돌아감

- 가변인자
	매개변수의 개수를 유동적으로 설정하는 방법
	방법: (자료형... 변수명)
	-> 같은 자료형으로 배열이 만들어진다


- 오버로딩
	동일한 이름의 메소드를 여러 개 정의해서 사용하는 것
	하나의 함수가 마치 여러 일을 하는 것처럼 정의할 수 있기 때문에 다형성 (polymorphism) (다양한 형태로) 이 구현 됨

	오버로딩 조건
	- 메소드의 이름이 같아야 함
	- 매개 변수의 타입이나 개수를 다르게 정의해야 함
	- 매개변수명은 무관함
	- 리턴 타입은 무관함
	
	메소드 명은 똑같고 기능도 비슷한데 입력받는 데이터가 다를 때 사용한다
	사용자가 메소드를 호출했을 때 같은 이름의 메소드가 여러개 있다면 어떤 메소드를 호출?
	-> 매개변수를 기준으로 호출한다
	이 메소드들은 이름은 같지만 전혀 다른 메소드가 된다


- this
	객체 안에서 자기 자신을 가리키는 포인터
	자기 참조 변수
	this -> 내 객체에 있는

	this 사용 예시
	public class MethodExam{
		public String name="홍길동";

	public void pirntName(){
		Stirng name = "이길동";
		System.out.println("name : "+name);
		System.out.println("this,name : "+this.name);
		}
	}

	* 위와 같은 메서드 내 변수 명이 필드명과 같은 경우
	 메서드 내 변수가 우선이므로 this 객체를 이용하여 필드 사용 가능


- getter와 setter 메소드
	클래스 안에 있는 필드에 값을 입력하거나 그 값을 꺼내오기 위한 전용 메소드
	다른 메소드와 다를 것 없음, 그냥 역할이 이런 것일 뿐임

	* setter 메소드
	객체 안에 있는 필드에 값을 넣어주기 위한 메소드
	입력 받은 값을 검증한 후 필드에 저장하도록 해주는 메소드
	바로 넣어줄 수도 있고 검증 후 넣어 줄 수도 있지만 검증 후 넣어주기 위한 기능으로 많이 쓴다.
	메소드명은 set+필드이름으로 지정(첫글자 대문자)

	표현식
	[접근제한자][예약어] void set필드명(자료형 변수명){
		(this.)필드명=변수명;
	}
	public void setStudentNo(int studentNo){
		this.studentNo = studentNo;
	}


	* getter 메소드
	그냥 반환 할 수도 있지만 보기 좋게 가공해서 반환 할 수도 있다. 
	필드의 값을 가공한 후 외부에서 읽을 수 있도록 반환해주는 메소드
	메소드명은 get+필드이름으로 지정(첫글자 대문자)
 	필드타입이 boolean일 경우 is+필드이름으로 지정(첫글자 대문자)

	ex) 객체 사람
	성별: 남자 여자로 저장하면 귀찮을 것 같아
	그래서 byte나 boolean으로 저장해 놓음
	그런데 출력할 때는 남자나 여자로 출력되게 하고 싶음
	-> getter 메소드 사용

	표현식
	[접근제한자][예약어] 반환형 get필드명(){
		return 필드명;
	}
	public int getStudentNo(){
		return StudentNO;
	}


- 생성자 (Constructor)
	객체가 생성되면 자동으로 호출되는 메소드
	클래스명과 이름이 같음
	일반적으로 객체가 제대로 동작 할 수 있게 초기화(기본값 입력)하는 용도로 많이 사용됨
	
	생성자 규칙
	생성자의 선언은 메소드 선언과 유사하나 반환 값이 없으며
	생성자명을 클래스명과 똑같이 지정해주어야 한다

	
- 생성자의 종류
	* 기본(Default) 생성자
	작성하지 않은 경우 비어 있는 상태로 생성된다 (JVM이 자동으로 기본 생성자 생성)
	생성자는 객체를 생성할 때 반드시 필요함

	* 매개변수 생성자
	- 객체 생성 시 전달받은 값으로 객체를 초기화 하기 위해 사용
	- 생성하면서 값을 입력받아야 하는 경우 매개 변수 있는 생성자를 명시적으로 입력한다.
	- 매개변수 생성자 작성 시 기본생성자는 생성 되지 않는다.
	- 상속에서 사용 시 반드시 기본 생성자를 작성
	- 오버로딩을 이용하여 작성 (같은 이름의 메소드를 매개변수만 다르게 해서 작성)
	-> 같은 클래스의 이름으로 매개변수의 이름만 다르게 해서 사용할 수 있다.
	ex) 객체를 입력 할 때 입력값 안받는 것 하나, 입력값 받는 것 하나 이렇게 만들 수 있다.


	생성자 표현식
	생성자는 반환자료형을 가지지 않는다.
	[접근제한자][예약어] class 클래스{
		[접근제한자] 클래스명() {}  -> 기본(default) 생성자와 똑같이 생김
		[접근제한자] 클래스명(매개변수){ (this.)필드명 = 매개변수; }
	}


	//생성자 오버로딩
	같은 클래스의 이름으로 매개변수의 이름만 다르게해서 호출하겠다.
	
	예시)
	public ConstructorExam01() {
		System.out.println("생성자 1 호출");
	}
	public ConstructorExam01(String name, int age) {
		System.out.println("생성자 2 호출");
	}

	


	ce01 = new ConstructorExam01();
	공간이 하나 생김
	ce01 = new ConstructorExam01("홍길동",20); // 클래스에 대한 생성자를 호출하는 것
 	공간이 하나 더 생김
	그런데 두번재로 생긴 객체의 주소가 'ce01' 이라는 앞에 생긴 객체와 같은 참조변수에 저장이 되어서 
	앞에 만들어졌던 객체는 객체 주소를 저장할 수 있는 참조변수가 없어지게되고 객체가 동떨어지게 된다.



- this() 생성자 호출

	- 공통된 내용이 들어가 있는 생성자 하나 만들어 놓고
	나머지 생성자가 호출 될 때 공통된 내용 들어있는 생성자 넣어주기

	this -> 자기참조변수 자기를 가르키는 참조변호
	this() -> this메소드
	생성자에서 사용할 수 있다
	생성자 안에서 다른 생성자를 찾아서 호출함
	생성자의 첫줄에서만 허용


	this() 표현식
	[접근제한자][예약어] class 클래스명{
		[접근제한자]클래스명(){
			this(매개변수);
		{
		[접근제한자]클래스명(매개변수){(this.)필드명 =매개변수;}
	}	



	this()사용 예시 - ConstructorExam.java
	public class ConstructorExam {
		public String name;
		pubic int age;

	public ConstructorExam() {		// 입력값이 없을 때 사용되는 생성자
		this("입력없음",0); 		//-> this() 가장 위에 와야 한다.
		// -> 이때는 name 이 입력없음이 되고 age가 0이 된다.
		System.out.println("생성자 1 호출");
	}
	public ConstructorExam(String name, int age) {
		System.out.println("생성자 2 호출");
	}

	}



--------------------------------------------------------------------------

- package와 import

- 소스파일
	소스파일 구성 순서
	1. package문 (여러 연관된 클래스 파일 묶어놓은 것, 클래스의 소속)
	2. import문
	3. 클래스 선언

	예시
	package kh.academy;	//package문
	import java.util.Date;	//import문
	public class ImportTest {	//클래스 선언
		public static void main(String[] args){
	
		}
	}
	
- package

	- 패키지
	서로 관련된 클래스 혹은 인터페이스의 묶음으로 폴더와 비슷
	패키지는 서브 패키지를 가질 수 있으며 '.'으로 구분
	예) Scanner 클래스의 full name은 패키지명이 포함된 java.util.Scanner 이다.

	- 패키지의 선언
	소스파일 첫 번째 문장에 단 한번 선언하며 하나의 소스파일에
	둘 이상의 클래스가 포함된 경우, 모두 같은 패키지에 속함
	모든 클래스는 하나의 패키지에 속하며, 패키지가 선언되지 않은
	클래스는 자동적으로 이름없는 패키지(default)에 속하게 됨
	예) package java.util;


	- 패키지 명명규칙
	숫자로 시작할 수 없고, $,_를 제외한 특수문자 사용 불가
	java로 시작하는 패키지는 자바 표준 API에서만 사용되므로 사용 불가
	관례적으로 모두 소문자로 작성
	일반적으로 회사에서는 도메인이름으로 많이 작성함
	관례적으로 도메인 이름은 역순으로 지정 후 마지막에 플로젝트 이름을 붙여줌
	예) package kr.or.iei.project1


	* 같은 패키지 내 클래스 사용
	같은 패키지에 속한 클래스들은 조건 없이 다른 클래스를 사용 가능
	
	* 다른 패키지 내 클래스 사용
	1. 패키지와 클래스명을 모두 적어 사용하는 방법
		형식: 패키지명.클래스명 필드명
	2. import문 사용하는 방법



- import
	사용할 클래스가 속한 패키지를 지정하는 데 사용
	import문을 사용하면 클래스를 사용할 때 패키지 명 생략 가능

	- (import object.method.MethodExam02; 넣어주면
	그 다음부터는 MethodExam02 me02; 이렇게 사용 가능)

	- java.lang 패키지의 클래스는 import를 하지 않고도 사용 가능
	(java.lang 패키지 내의 클래스 -> String, Object, System...)
	

	- import object.method.* -> object.method 패키지에 속한 모든 클래스 사용 가능
	* 별을 붙여주면 된다.

	지정된 패키지에 포하묀 클래스는 import 가능하지만 서브 패키지에 속한 모든 클래스까지는 불가능
	import object.*; -> 하면  object바로 아래 패키지만 포함된다는 소리임
	그 패키지 하나하나에 속하는 클래스 파일들은 포함 안된다.
	
	예) import java.util,Date;
	    import java.util.*;	//java.til 패키지 내의 모든 클래스(단, 서브클래스는X)
	    import java.*; 		// 불가능

	- import문은 패키지문과 클래스의 선언의 사이에 선언
	



- import문 주의 사항

	이름이 같은 클래스가 속한 두 패키지를 import 할 때는 클래스 앞에
	패키지 명을 붙여 구분해 주어야 함

	예) 
	package kh.academy;
	import java.sql.Date;
	public class ImportTest {
		public static void main(String[] agrs){
			java.util.Date today = new java.util.Date();
		}
	}