2020년 12월 9일

JDBC MVC 패턴


MVC Pattern
소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴 중 하나로
모델-뷰-컨트롤러(Model-View-Controller, MVC) 의 약자
유연성과 확장성을 고려한 개발을 하기 위해 사용

각각의 역할에 따라서 패키지 자체를 나눈다.


View: 사용자로부터 입력을 받고, 화면을 보여주기(UI) 위한 역할

Model : 백엔드, 데이터베이스와 연동을 한다던지, 클래스들
데이터를 처리하기 위한 로직을 구성
DBMS와 상호작용을 하거나 DATA를 가공처리 하는 역할

뷰와 모델은 서로 간에 간섭을 하면 안됨


Controller: 사용자에게 실제로 요청한 것을 어떻게 처리할지를 결정하는 역할
(우리 프로그램을 제어하기 위한 뷰, 모델간의 상호작용을 하게 해줌)
뷰에서 입력받은 데이터를 컨트롤러가 받아서 모델로 보냄
모델에서 처리한 데이터를 컨트롤러가 받아서 뷰에게 보내고 뷰가 화면에 뿌림

----------------------------------------------------------------------------------------------

Model

Enitity
딱 각각의 컬럼들에 대해서 필드만 만들어 놓은것
(Setter / Getter없음)

Service

- VO(Value Object) , 데이터베이스에 있는거 그대로 꺼내와서 읽기위한 읽기 전용이라고 많이 말함
데이터베이스의 각 컬럼 개체(entity) 저장용 클래스가 있는 패키지로
DB의 도메인 정보를 Client에게 전달할 때 그 도메인 단위 정보를 VO에 구현
필드에다가 Setter / Getter 메소드까지 만들어 놓은 것

- DTO(Data Transfer Object), 데이터베이스에 있는 데이터 가져와서 조금 더 가공한 것
데이터베이스의 각 컬럼 개체(entity) 저장용 클래스가 있는 패키지로
DB의 도메인과 일치하지 않으며 어떤 로직에 사용되는 영속적이지 않은 정보를 DTO에 구현 
데이터간에 주고 받기 위해 가공이 들어간 것


- DAO(Database Access Obeject)
데이터베이스에 접근하기 위한 객체
DBMS에 접속하여 실제 데이터를 전송하거나 결과 값을 전달 받는 클래스가 있는 패키지

멤버라는 테이블 만들어놓고 데이터 가져옴 -> ResultSet에 저장 ->
ResultSet만으로 데이터를 처리하기에는 불편함 -> 데이터들을 다른 페이지로 이동하게 하거나
다양하게 사용하기 위해서 멤버라는 클래스객체를 만들어서 사용했음 
엔티티라고 볼 수도 있고 VO, DTO, DAO라고 볼 수도 있다.

----------------------------------------------------------------------------------------------

JDBC_MVC로 회원관리 프로그램 구현하기

Member 클래스

package com.kh.member.model.vo;

import java.sql.Date;
// 데이터 저장용 VO 클래스 
public class Member {
// 필드부
	// DB의 Member 테이블에 정의되어 있는 컬럼들을 필드로 정의
		// MEMBER_ID, MEMBER_PWD, MEMBER_NAME, GENDER, 
		// AGE, EMAIL, PHONE, ADDRESS, HOBBY, ENROLL_DATE
	private String memberId;
	private String memberPwd;
	private String memberName;
	private char gender;
	private int age;
	private String email;
	private String phone;
	private String address;
	private String hobby;
	private Date enrollDate;
	
// 생성자부
	public Member() {}
	public Member(String memberId, String memberPwd, String memberName, char gender,
			int age, String email, String phone, String address, String hobby, Date enrollDate) {
		this.memberId = memberId;
		this.memberPwd = memberPwd;
		this.memberName = memberName;
		this.gender = gender;
		this.age = age;
		this.email = email;
		this.phone = phone;
		this.address = address;
		this.hobby = hobby;
		this.enrollDate = enrollDate;
	}
// 메소드부
	// Getter / Setter 메소드
	public String getMemberId() { return memberId; }
	public void setMemberId(String memberId) { this.memberId = memberId; }
	public String getMemberPwd() { return memberPwd; }
	public void setMemberPwd(String memberPwd) { this.memberPwd = memberPwd; }
	public String getMemberName() { return memberName; }
	public void setMemberName(String memberName) { this.memberName = memberName; }
	public char getGender() { return gender; }
	public void setGender(char gender) { this.gender = gender; }
	public int getAge() { return age; }
	public void setAge(int age) { this.age = age; }
	public String getEmail() { return email; }
	public void setEmail(String email) { this.email = email; }
	public String getPhone() { return phone; }
	public void setPhone(String phone) { this.phone = phone;}
	public String getAddress() { return address; }
	public void setAddress(String address) { this.address = address; }
	public String getHobby() { return hobby; }
	public void setHobby(String hobby) { this.hobby = hobby; }
	public Date getEnrollDate() { return enrollDate; }
	public void setEnrollDate(Date enrollDate) { this.enrollDate = enrollDate; }
	
	// toString() 메소드 오버라이딩
	@Override
	public String toString() {
		return memberId+" / "+memberPwd+" / "+memberName+" / "+gender+" / "+
				age+" / "+email+" / "+phone+" / "+address+" / "+hobby+" / "+enrollDate;
	}
}

----------------------------------------------------------------------------------------------

Member Controller 클래스

package com.kh.member.controller;

import java.util.ArrayList;

import com.kh.member.model.dao.MemberDAO;
import com.kh.member.model.vo.Member;
import com.kh.member.view.MemberView;

public class MemberController {
// 필드부
	// 뷰 객체를 저장할 참조변수 생성
	private MemberView mv;
	// 모델(DAO) 객체를 저장할 참조 변수 생성
	private MemberDAO md;
// 생성자부
	public MemberController() {
		// 뷰 객체 생성 후 참조변수에 저장
		mv = new MemberView(); // 뷰 메소드 호출해서 값 받아와야 하니까
		// 모델(DAO) 객체 생성 후 참조 변수에 저장
		md = new MemberDAO(); // DAO 메소드 호출해서 값 받아줘야 하니까
	}
// 메소드부
	// 회원관리 프로그램 시작
	public void start() {
		int select;
		// 뷰에서 메인메뉴 출력 후 사용자에게 선택 받은 값을 반환해 주면 select 변수에 저장해서 사용
		// 반복문이 진행될 때마다 사용자에게 다시 선택 받아서 기능 수행(사용자가 7.프로그램종료를 선택하기 전까지 반복)
		while((select = mv.mainMenu()) != 7) {
			switch(select) {
			case 1: // 회원 등록
				insertMember(); // 컨트롤러 insertMember()
				break;
			case 2: // 회원 정보 수정
				updateMember();
				break;
			case 3: // 회원 삭제
				deleteMember();
				break;
			case 4: // 회원 목록 조회
				allListMember();
				break;
			case 5: // 회원 정보 조회(ID) 회원 한명에 대한 정보
				searchMemberId();
				break;
			case 6: // 회원 정보 조회(이름)
				searchMemberName();
				break;
			}
		}
	}
	
	// 회원 등록
	public void insertMember() {
//		// 뷰에서 화면에 메뉴출력 후 사용자에 입력받기(입력받은 정보를 Member 객체에 담아서 반환)
//		Member mb = mv.insertMember();
//		// 모델(DAO)에 사용자 입력값이 저장된 Member 객체를 전달해서 DB에 삽입 후 결과를 받아옴
//		int result = md.insertMember(mb);
//		// 뷰에서 결과에 따라 출력 내용 결정
//		mv.printResult(result, "등록");
		
		// 위 코드를 한줄로 작성
		// 뷰에서 입력받은 정보를 Member 객체로 받아와서 DAO에 전달해서 DB등록 후 결과값 받아와서 뷰에서 출력
		mv.printResult(md.insertMember(mv.insertMember()),"등록");
		
	}

	// 회원 정보 수정
	public void updateMember() {
//		// 뷰에서 사용자에게 수정할 아이디 입력 받기
//		String id = mv.inputId("수정");
//		// 모델(DAO)에 아이디 전달해서 정보 조회 후 조회된 데이터 Member 객체에 저장해서 반환
//		Member mb = md.searchMemberId(id);
//		// 뷰에 조회된 데이터를 전달하고, 수정할 데이터를 입력받아서 Member 객체에 저장해서 반환
//		Member newMb = mv.updateMember(mb);
//		// 모델(DAO)에 수정할 데이터를 전달해서 DB 수정 후 결과를 반환
//		int result = md.updateMember(newMb);
//		// 뷰에서 결과에 따라 출력 내용 결정
//		mv.printResult(result, "정보 수정");
		
		// 위코드를 한줄로 작성
		mv.printResult(md.updateMember(mv.updateMember(md.searchMemberId(mv.inputId("수정")))),"정보 수정");
	}

	// 회원 정보 삭제
	public void deleteMember() {
//		// 뷰에서 사용자에게 삭제할 아이디 입력 받기
//		String id = mv.inputId("삭제");
//		// 모델(DAO)에 아이디 전달해서 정보 조회 후 조회된 데이터 Member 객체에 저장해서 반환
//		Member mb = md.searchMemberId(id);
//		// 뷰에 조회된 데이터를 전달하고, 삭제 여부를 입력받아서 삭제할 아이디 반환
//		String newId = mv.deleteMember(mb);
//		// 모델(DAO)에 삭제할 아이디 전달해서 DB 수정 후 결과를 반환
//		int result = md.deleteMember(newId);
//		// 뷰에서 결과에 따라 출력 내용 결정
//		mv.printResult(result, "삭제");
		
		// 위코드를 한줄로 작성
		mv.printResult(md.deleteMember(mv.deleteMember(md.searchMemberId(mv.inputId("삭제")))), "삭제");
	}	
		
	// 회원 목록 조회
	public void allListMember() {
		
//		// 모델(DAO)에게 회원 전체 목록 받기(ArrayList 객체로)
//		ArrayList<Member> list = md.searchMember();
//		// 뷰에 조회된 데이터 전달하고, 출력
//		mv.searchMember(list);
		
		// 위 코드를 한줄로 작성
		mv.searchMember(md.searchMember());
	}
	// 회원 정보 조회 (ID)
	public void searchMemberId() {
//		// 뷰에서 사용자에게 조회할 아이디 입력 받기
//		String id = mv.inputId("조회");
//		// 모델(DAO)에 아이디 전달해서 조회 후 조회된 데이터 Member 객체에 저장해서 반환
//		Member mb = md.searchMemberId(id);
//		// 뷰에서 조회해온 데이터 출력
//		mv.searchMemberId(mb);
	
		// 위 코드 한줄로 작성
		mv.searchMemberId(md.searchMemberId(mv.inputId("조회")));
	}

	// 회원 정보 조회 (Name)
	public void searchMemberName() {
//		// 뷰에서 사용자에게 조회할 이름 입력 받기
//		String name = mv.inputName("조회");
//		// 모델(DAO)에 이름 전달해서 조회 후 조회된 데이터 ArrayList 객체에 저장해서 반환
//		ArrayList<Member> list = md.searchMemberName(name);
//		// 뷰에서 조회해온 데이터 출력
//		mv.searchMemberName(list);
		
		// 위 코드 한줄로 작성
		mv.searchMember(md.searchMemberName(mv.inputName("조회")));
	}
	
	
}


----------------------------------------------------------------------------------------------

MemberView 클래스

package com.kh.member.view;

import java.util.ArrayList;
import java.util.Scanner;

import com.kh.member.model.vo.Member;

public class MemberView {
	private Scanner sc = new Scanner(System.in);
	// 메인 메뉴
	public int mainMenu(){
		int select=0;
		while(true) {
		System.out.println("##### 회원 관리 프로그램 #####");
		System.out.println("1. 회원 등록");
		System.out.println("2. 회원 정보 수정");
		System.out.println("3. 회원 삭제");
		System.out.println("4. 회원 목록 조회");
		System.out.println("5. 회원 정보 조회(ID)");
		System.out.println("6. 회원 정보 조회(이름)");
		System.out.println("7. 프로그램 종료");
		System.out.print("메뉴 선택 : ");
		select = sc.nextInt();
		if(select >= 1 && select <= 6) {
			break;
		}else if(select == 7) {
			System.out.println("프로그램이 종료됩니다.");
			break;
		}
			System.out.println("잘못된 입력! 다시 선택해주세요 !");
		}
		return select;
	}

	// 회원 등록 - 입력
	public Member insertMember() {
		System.out.println("----- 회원 등록 -----");
		// 사용자에 입력받은 데이터를 Member 객체에 저장
		Member mb = new Member();
		System.out.print("아이디 : ");
		mb.setMemberId(sc.next());
		System.out.print("비밀번호 : ");
		mb.setMemberPwd(sc.next());
		System.out.print("이름 : ");
		mb.setMemberName(sc.next());
		System.out.print("성별(M/F) : ");
		mb.setGender(sc.next().charAt(0));
		System.out.print("나이 : ");
		mb.setAge(sc.nextInt());
		System.out.print("이메일 : ");
		mb.setEmail(sc.next());
		System.out.print("휴대폰 : ");
		mb.setPhone(sc.next());
		sc.nextLine();
		System.out.print("주소 : ");
		mb.setAddress(sc.nextLine());
		System.out.print("취미(여러 개일 경우,로 구분) : ");
		mb.setHobby(sc.nextLine());
		mb.setEnrollDate(new java.sql.Date(new java.util.Date().getTime()));
		return mb;
	}

	// 회원 정보 수정 - 입력
	public Member updateMember(Member mb) {
		System.out.println("----- 회원 정보 수정 -----");
		if(mb == null) {
			System.out.println("회원 정보가 없습니다.");
			return mb;
		}
		int select = 0;
		while(select != 8) {
			System.out.println("[ "+mb.getMemberId()+" 회원 정보 ]");
			System.out.println("이름 : "+mb.getMemberName());
			System.out.println("등록일자 : "+mb.getEnrollDate());
			System.out.println("1.비밀번호 : ****");
			System.out.println("2.성별 : "+mb.getGender());
			System.out.println("3.나이 : "+mb.getAge());
			System.out.println("4.이메일 : "+mb.getEmail());
			System.out.println("5.휴대폰 : "+mb.getPhone());
			System.out.println("6.주소 : "+mb.getAddress());
			System.out.println("7.취미 : "+mb.getHobby());
			System.out.println("8.수정완료");
			System.out.print("수정할 항목 번호 : ");
			select = sc.nextInt(); 
			switch(select) {
			case 1 : 
				System.out.print("새로운 비밀번호 : ");
				mb.setMemberPwd(sc.next());
				break;
			case 2 : 
				System.out.print("새로운 성별 : ");
				mb.setGender(sc.next().charAt(0));
				break;
			case 3 : 
				System.out.print("새로운 나이 : ");
				mb.setAge(sc.nextInt());
				break;
			case 4 : 
				System.out.print("새로운 이메일 : ");
				mb.setEmail(sc.next());
				break;
			case 5 : 
				System.out.print("새로운 휴대폰 : ");
				mb.setPhone(sc.next());
				break;
			case 6 : 
				System.out.print("새로운 주소 : ");
				if(sc.hasNextLine()) {
					sc.nextLine();
				}
				mb.setAddress(sc.nextLine());
				break;
			case 7 : 
				System.out.print("새로운 취미 : ");
				if(sc.hasNextLine()) {
					sc.nextLine();
				}
				mb.setHobby(sc.nextLine());
				break;
			case 8 : break;
			default : 
				System.out.println("잘못된 번호를 입력하셨습니다.");
			}
		}
		return mb;
	}
	
	// 회원 삭제 - 입력
	public String deleteMember(Member mb) {
		System.out.println("----- 회원 정보 삭제 -----");
		if(mb == null) {
			System.out.println("회원 정보가 없습니다.");
			return null;
		}
		
		System.out.println("[ "+mb.getMemberId()+" 회원 정보 ]");
		System.out.println("이름 : "+mb.getMemberName());
		System.out.println("등록일자 : "+mb.getEnrollDate());
		System.out.print("삭제하시겠습니까?(Y/N) : ");
		if(sc.next().charAt(0) == 'Y') {
			return mb.getMemberId();
		}else {
		return null;
		}
	}
	// 회원 등록, 수정, 삭제 - 결과 출력
 	public void printResult(int result, String mode) {
		if (result > 0) {
			System.out.println("회원 "+mode+" 완료");
		} else {
			System.out.println("회원 "+mode+" 실패");
		}
	}


	// 회원 아이디 입력
	public String inputId(String mode) {
		System.out.print(mode+"할 회원 아이디 입력 : ");
		String id = sc.next();
		return id;
	}

	// 회원 목록 조회 - 결과 출력
	public void searchMember(ArrayList<Member> list) {
		
		if(list.size() > 0) {
			System.out.println("총 "+list.size()+"명이 조회되었습니다.");
			System.out.println("---------------------------------");
			System.out.println("아이디		이름	성별	나이");
			System.out.println("---------------------------------");
			for(Member mb : list) {
				System.out.println(mb.getMemberId()+"		"+mb.getMemberName()+"	"+mb.getGender()+"	"+mb.getAge());
			}
			System.out.println("---------------------------------");
		}else {
			System.out.println("회원정보가 없습니다.");
		}
		
	}
	
	// 회원 정보 조회 - 결과 출력
	public void searchMemberId(Member mb) {
		if(mb != null) {
		System.out.println("[ "+mb.getMemberId()+" 회원 정보 ]");
		System.out.println("이름 : "+mb.getMemberName());
		System.out.println("등록일자 : "+mb.getEnrollDate());
		System.out.println("성별 : "+mb.getGender());
		System.out.println("나이 : "+mb.getAge());
		System.out.println("이메일 : "+mb.getEmail());
		System.out.println("휴대폰 : "+mb.getPhone());
		System.out.println("주소 : "+mb.getAddress());
		System.out.println("취미 : "+mb.getHobby());
		}else {
			System.out.println("회원 정보가 없습니다.");
		}
	}

	// 회원 이름 - 입력
	public String inputName(String mode) {
		System.out.print(mode+"할 회원 이름 입력 : ");
		String name = sc.next();
		return name;
	}
	
	// 회원 정보 조회(이름) - 결과 출력
	public void searchMemberName(ArrayList<Member> list) {
		if(list.size() > 0) {
			System.out.println("총 "+list.size()+"명의 회원이 조회되었습니다.");
			for(Member mb : list) {
				System.out.println("[ "+mb.getMemberId()+" 회원 정보 ]");
				System.out.println("이름 : "+mb.getMemberName());
				System.out.println("등록일자 : "+mb.getEnrollDate());
				System.out.println("성별 : "+mb.getGender());
				System.out.println("나이 : "+mb.getAge());
				System.out.println("이메일 : "+mb.getEmail());
				System.out.println("휴대폰 : "+mb.getPhone());
				System.out.println("주소 : "+mb.getAddress());
				System.out.println("취미 : "+mb.getHobby());
			}
		}else {
			System.out.println("회원정보가 없습니다.");
		}
	}
	
	
}


----------------------------------------------------------------------------------------------

MemberDAO 클래스

package com.kh.member.model.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.kh.member.model.vo.Member;

// DB와 연동할 수 있는 클래스
public class MemberDAO {
	// 회원 등록
	public int insertMember(Member mb) {
		// DB에 저장
				Connection conn = null;
				String query = null;
				Statement stmt = null;
				int result = 0;
				try {
				 	conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE",
							"STUDENT","STUDENTPASS");
					query = "INSERT INTO MEMBER VALUES('"+mb.getMemberId()+"','"+mb.getMemberPwd()+"','"+mb.getMemberName()+"','"+
							mb.getGender()+"',"+mb.getAge()+",'"+mb.getEmail()+"','"+mb.getPhone()+"','"+mb.getAddress()+"','"
							+mb.getHobby()+"','"+mb.getEnrollDate()+"')";
					stmt = conn.createStatement();
					result = stmt.executeUpdate(query);
				} catch (SQLException e) {
					System.out.println("오류발생 : 관리자에게 문의하세요~!");
					e.printStackTrace();
				} finally {
					try {
						stmt.close();
						conn.close();
					} catch (SQLException e) {
						System.out.println("오류발생 : 관리자에게 문의하세요~!");
						e.printStackTrace();
					}
				}
				return result;
	}

	// 회원 정보 수정
	public int updateMember(Member mb) {
		// DB연결을 위한 참조변수
		Connection conn = null;
		String query = null;
		PreparedStatement pstmt = null;
		int result = 0;
		// 조회된 데이터가 없는 경우
		if(mb == null) {
			return result;
		}
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","STUDENT","STUDENTPASS");
			query = "UPDATE MEMBER SET MEMBER_PWD=?, GENDER=?, AGE=?, EMAIL=?, PHONE=?, ADDRESS=?, HOBBY=? WHERE MEMBER_ID=?";
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mb.getMemberPwd());
			pstmt.setString(2, String.valueOf(mb.getGender()));	// gender는 단일문자여서 문자열 형태로 변환
			pstmt.setInt(3, mb.getAge());
			pstmt.setString(4, mb.getEmail());
			pstmt.setString(5, mb.getPhone());
			pstmt.setString(6, mb.getAddress());
			pstmt.setString(7, mb.getHobby());
			pstmt.setString(8, mb.getMemberId());
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("오류발생 : 관리자에게 문의하세요");
		} finally {
			try {
				pstmt.close();
				conn.close();
			} catch (SQLException e2) {
				System.out.println("오류발생 : 관리자에게 문의하세요");
			}
		}
			return result;
		}
	
	// 회원정보 삭제
	public int deleteMember(String id) {
		Connection conn = null;
		String query = null;
		Statement stmt = null;
		int result = 0;
		
		if(id == null) {
			return result;
		}
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","STUDENT","STUDENTPASS");
		
		query = "DELETE FROM MEMBER WHERE MEMBER_ID = '"+id+"'";
		stmt = conn.createStatement();
		result = stmt.executeUpdate(query);
		} catch (SQLException e) {
			System.out.println("오류발생 : 관리자에게 문의하세요");
		} finally {
			try {
				stmt.close();
				conn.close();
		} catch (SQLException e2) {
			System.out.println("오류발생 : 관리자에게 문의하세요");
		}
	}	
		return result;
	}
	
	// 회원 목록 전체 조회
	public ArrayList<Member> searchMember() {
		ArrayList<Member> list = new ArrayList<Member>();
		
		// DB연결을 위한 참조변수
		Connection conn = null;
		String query = null;
		Statement stmt = null;
		ResultSet rset = null;
	
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","STUDENT","STUDENTPASS");
			query = "SELECT * FROM MEMBER";
			stmt = conn.createStatement();
			rset = stmt.executeQuery(query);
		
			// 리스트에 조회해온 데이터 저장
			while(rset.next()) {
			Member mb = new Member(rset.getString(1),rset.getString(2),rset.getString(3)
					,(rset.getString(4)==null)?'X':rset.getString(4).charAt(0),rset.getInt(5),rset.getString(6),rset.getString(7)
					,rset.getString(8),rset.getString(9),rset.getDate(10));
			list.add(mb);
			}	
		}catch (SQLException e) {
			System.out.println("오류 발생 : 관리자에게 문의하세요");
		} finally {
			try {
				rset.close();
				stmt.close();
				conn.close();
			} catch (SQLException e2) {
				System.out.println("오류 발생 : 관리자에게 문의하세요");
			}
		}
		return list;
			
	}
	
	// 회원정보 조회(ID)
	public Member searchMemberId(String id) {
		// DB연결을 위한 참조변수
		Connection conn = null;
		String query = null;
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		// 조회해온 데이터를 저장할 Member 참조변수 생성 
			// 조회해온 데이터가 있을 때는 Member 객체를 만들어서 저장하고, 없을 때는 null
		Member mb = null;
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","STUDENT","STUDENTPASS");
			// DB에서 아이디로 회원 조회
			query = "SELECT * FROM MEMBER WHERE MEMBER_ID = ?";
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, id);
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				// 조회해 온 데이터 Member 객체에 저장
				mb = new Member(rset.getString(1),rset.getString(2),rset.getString(3)
				,(rset.getString(4) == null)?'X':rset.getString(4).charAt(0),rset.getInt(5),rset.getString(6),rset.getString(7)
						,rset.getString(8),rset.getString(9),rset.getDate(10));
			}

		}catch (SQLException e) {
				System.out.println("오류발생 : 관리자에게 문의하세요");
		} finally {
			try {
				rset.close();
				pstmt.close();
				conn.close();
			} catch (SQLException e2) {
				System.out.println("오류발생 : 관리자에게 문의하세요");
			}
		}
		return mb;

	}
	
	// 회원정보 조회(Name)
	public ArrayList<Member> searchMemberName(String name) {
		// DB연결을 위한 참조변수
			Connection conn = null;
			String query = null;
			PreparedStatement pstmt = null;
			ResultSet rset = null;
			// 조회해 온 데이터를 저장해 줄 리스트 객체 생성
			ArrayList<Member> list = new ArrayList<Member>();
			
			try {
				conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","STUDENT","STUDENTPASS");
				// DB에서 아이디로 회원 조회
				query = "SELECT * FROM MEMBER WHERE MEMBER_NAME = ?";
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, name);
				rset = pstmt.executeQuery();

				// 조회해 온 데이터 Member 객체에 저장
				while(rset.next()) {
					Member mb = new Member(rset.getString(1),rset.getString(2),rset.getString(3)
							,(rset.getString(4)==null)?'X':rset.getString(4).charAt(0),rset.getInt(5),rset.getString(6),rset.getString(7)
							,rset.getString(8),rset.getString(9),rset.getDate(10));
					list.add(mb);
				}
			}catch (SQLException e) {
					System.out.println("오류발생 : 관리자에게 문의하세요");
				} finally {
					try {
						rset.close();
						pstmt.close();
						conn.close();
					} catch (SQLException e2) {
						System.out.println("오류발생 : 관리자에게 문의하세요");
					}
				}
			return list;
	}
	
	
	
	
	
}

