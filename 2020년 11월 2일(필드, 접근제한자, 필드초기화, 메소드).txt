2020년 11월 2일

객체지향 프로그램
객체를 중심으로 프로그램을 한다
각각의 객체를 기준으로해서 연관된 속성 기능을 중심으로 부품으로 만들어놓고 연관지어가며 사용하는 것

--------------------------------------------------------------------

클래스와 객체 2

- 필드(Field)
	클래스 어디에서 만들어지냐에 따라 다르다
	클래스 안에 바로 만들어지는 애들
	생성자, 메소드 모두가 사용하는 변수 -> 필드
	생성자와 메소드 내부에 선언 -> 로컬변수(지역변수)

	객체의 데이터가 저장되는 곳
	변수와 비슷하지만 생성자나 메소드 외부에 선언되어 클래스 전체에서 사용됨
	
	* 필드의 종류
	- 클래스 변수: 클래스 영역에 static키워드(예약어)를 가짐.
	- 멤버변수(인스턴스 변수): 클래스 영역에 선언.
	
	* 필드 특징
	객체가 생성될 때 만들어지고, 객체가 소멸할 때 같이 소멸된다 -> 인스턴스 변수에 대한 특징
	필드는 기본타입, 또는 참조타입 변수로 생성 가능
	선언 시 초기값을 넣을 수 있음
	클래스 내부에서 필드 사용 시 이름만 불러서 사용
	클래서 외부에서 필드 사용시 객체명.필드명으로 사용

	*필드 표현식
	[접근제한자][예약어] class 클래스명{
		[접근제한자][예약어] 자료형 변수명[=초기값];
	}

	* 필드 접근제한자
	+ public 전체 접근 가능
	# protected 같은 패키지, 후손 클래스 접근 가능
	~ default 같은 패키지 접근 가능
	- private 해당 클래스 내부만 접근 가능


	* 필드 예약어 
	- static(정적필드)
	정적 멤버 - 클래스에 고정된 멤버로서 객체를 생성하지 않고 사용할 수 있는 필드와 메소드
	같은 클래스의 객체들이 공유할 수 있는 공간이 하나 생성된다
	정적 멤버는 객체에 소속된 멤버가 아니라 클래스에 소속된 멤버이기 때문에 클래스 멤버라고도 한다.

	같은 타입의 여러 객체가 공유할 목적의 필드에 사용
	프로그램 실행 시에 정적 메모리 영역에 자동 할당
	같은 타입의 모든 객체가 꼭 필요한 공통적인 속성을 가진 변수에 사용

	static 표현식
	public class VariavleExam {
		public static int num;
	}

	- final(상수)
	필드가 가진 초기값 수정 불가능
	초기값은 필드를 선언할 때나 , 생성자에서만 설정 가능
	하나의 값만 계속 저장해야 하는 변수에 사용하는 예약어

	 final 표현식
	 public class VariableExam {
		public final int NUM =100;
	}

	-static final
	별도 공간에 따로 만들어진 절대로 변경이 되면 안되는 값
	모두 같이 쓸 수 있는 고정된 값
	정적필드(static)면서 상수(final)로 고정된 값
	한 번 초기값이 저장되면 변경할 수 없음
	관례적으로 상수이름은 모두 대문자로 지정
		여러 단어가 연결되는 경우 _로 구분
	
	static final 표현식
	public class VariableExam {
		public static final int NUM = 100;
	}


- 필드 초기화
	1.JVM 기본값 초기화 - 선언해놓고 값 아무것도 안넣어놓을 때
	2.명시적 초기화 - 직접 지정해서
	3.초기화 블록을 이용한 초기화
	4.생성자를 이용한 초기화
	
	* JVM 기본값 초기화
	별도의 초기값을 지정해 주지 않은 경우 JVM에서 자동으로 초기값 설정
	논리형 : false
	정수형 : 0
	실수형 : 0.0
	문자형 : (공백)
	문자열 : null

	* 명시적 초기화
	필드 선언 시 초기값 지정
	
	명시적 초기화 예시
	public class VariableExam { 
		public boolean var1 = true;	// 논리형
		public int var2 = 10;		// 정수형
		public double var3 = 3.5;	// 실수형
		public char var4 = 'A'		// 문자형
		public String var5 = "Hello";	// 문자열형
	}

	* 초기화 블록 
	초기화를 위한 별도의 영역을 만들어서 초기화를 시켜준다.

	- 인스턴스 블록({})
	인스턴스 변수를 초기화 시키는 블록으로 객체 생성시 마다 초기화 (객체가 생성될 때 초기화를 시켜줌)
	- static(클래스)블록 (static{})
	정적 필드를 위한 블록
	static 필드를 초기화 시키는 블록으로 프로그램 시작 시 한 번만 초기화


	초기화 블럭 표현식
	[접근제한자][예약어]class클래스명{
		[접근제한자]static자료형 필드1;
		[접근제한자]자료형 필드2;
		static{ 필드1= 초기값;}
		{ 필드2 = 초기값; }
	}

	인스턴스 초기화 블록 예시
	public class VariableExam { 
		public boolean var1 = true;	// 논리형
		public int var2 = 10;		// 정수형
		public double var3 = 3.5;	// 실수형
		public char var4 = 'A'		// 문자형
		public String var5 = "Hello";	// 문자열형
	
		{
			var1 = false;
			var2 = 20;
			var3 = 5.6;
			var4 = 'B';
			var5 = "안녕하세요";
		}
	}
	명시적 초기화와 블록초기화 두 개 쓰면 아래에 있는 블록으로 적용된다

	클래스 초기화 블록 예시
	public class VariableExam { 
		public boolean var1 = true;	// 논리형
		public static int var2 = 10;	// 정수형
		public double var3 = 3.5;	// 실수형
		public char var4 = 'A'		// 문자형
		public String var5 = "Hello";	// 문자열형
	}	static {
			var = 20;
		}
		{
			var1 = false;
			var3 = 5.6;
			var4 = 'B';
			var5 = "안녕하세요";
		}
	}


	* 생성자를 이용한 초기화
	객체가 만들어 질 때 자동으로 실행됨
	생성자 내부에 초기화 코드를 작성
	
	생성자를 이용한 초기화 예시
	인스턴스 초기화 블록 예시
	public class VariableExam { 
		public boolean var1 = true;	// 논리형
		public int var2 = 10;		// 정수형
		public double var3 = 3.5;	// 실수형
		public char var4 = 'A'		// 문자형
		public String var5 = "Hello";	// 문자열형
		public Variable() {
			var1 = false;
			var2 = 20;
			var3 = 5.6;
			var4 = 'B';
			var5 = "안녕하세요";
		}
	}

	* 초기화 순서
	클래스 변수
	JVM 기본값 -> 명시적 초기값 -> 클래스 초기화 블록 초기값
	
	인스턴스 변수
	JVM 기본값 -> 명시적 초기값 -> 인스턴스 초기화 블록 초기값 -> 생성자를 통한 초기값
	(static은 인스턴스 초기화 블록, 생성자를 통한 초기값 안해주는 게 좋다)
	가장 마지막에 실행 되는 게 보인다


- 메소드
	특정 기능을 가진 도구
	수학의 함수와 비슷하며 호출을 통해 사용
	전달 값이 없는 상태로 호출하거나 어떤 값을 전달하여 호출
	함수 내에 작성된 연산 수행 후 반환 값/ 결과 값은 있거나 없을 수 있음

	1. 어떤 결과를 낼 것인지 -> 반환 자료형(결과에 대한 정의)
	2. 입력값에 대한 정의
	3.이름
	4. 기능

	- 객체의 메소드
	하나의 객체 안에 기능을 정의하기 위해서 사용하는 것이 메소드
	객체의 기능을 수행하기 위한 코드 블록
	객체의 메소드를 호출하면 메소드 블록 안에 있는 코드들이 순서대로 실행됨
	메소드 명은 관례적으로 소문자로 작성
	메소드를 호출할 때 매개변수와 동일한 타입과 개수의 값을 넘겨줘야 정상 실행됨


	- 메소드 표현식
	[접근제한자][예약어]반환형 메소드명([매개변수]){
		// 기능 정의
	}

	public void information() {
		System.out.println(studentNo);
	}


	- 메소드 반환형
	void : 반환형이 없음을 의미, 반환 값이 없을 경우 반드시 작성
	기본 자료형 : 연산 수행 후 반환 값이 기본 자료형일 경우 사용
	배열 : 얀산 수행후 반환 값이 배열인 경우 배열의 주소값이 반환
	클래스 : 연산 수행후 반환 값이 해당 클래스 타입이 객체일 경우
		해당 객체의 주소값이 반환 ( 클래스==타입 )

	- 메소드 매개변수
	() : 매개변수가 없는 것을 의미
	기본 자료형 : 기본형 매개변수 사용 시 값을 복사하여 전달
		매개변수 값을 변경하여도 본래 값은 변경되지 않음
	배열/클래스 : 배열, 클래스 등 참조형을 매개변수로 전달 시에는 데이터의 주소 값을 전달하기 때문에
		매개변수를 수정하면 본래의 데이터가 수정됨(얕은 복사)
	가변인자 : 매개변수의 개수를 유동적으로 설정하는 방법으로 가변 매개변수 외 다른 매개변수가 있으면 
		가변 매개변수를 마지막에 설정
		*방법:(자료형...변수명)

	- 메소드 표현식
	* 매개변수가 없고 리턴 값 없을 때
	[접근제한자][예약어]void메소드명(){
		// 기능 정의
	}

	public void information() {
		System.out.println(studentNo);
	}

	* 매개변수가 없고 리턴 값 있을 때
	[접근제한자][예약어]반환형 메소드명(){
		// 기능 정의
	}
	
	public int information() {
		return studentNo;
	}

	* 매개변수가 있고 리턴 값이 없을 때
	[접근제한자][예약어]void메소드명 (자료형 변수명) {
		// 기능 정의
	}

	public void infrotmation(String studentName){
		System.out.println(studentNo+" "+studentName);
	}

	* 매개변수가 있고 리턴 값이 있을 때
	[접근제한자][예약어]반환형 메소드명(자료명 변수명){
		// 기능 정의
	}
	
	public String information(String studentName){
		return studentNo+" "+studentName;
	}


	

Static
모든 영역에서 공유해서 쓸 수 있는
프로그램이 실행될 때 만들어지거나 상수들이 만들어지는 영역

Static 블록
프로그램 실행될 때 딱 한번만 실행됨
인스턴스 블록은 객체가 생성이 될 때마다 계속해서 실행이 된다

