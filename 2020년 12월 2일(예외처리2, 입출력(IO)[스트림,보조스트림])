2020년 12월 2일

예외처리
오류가 발생할만한 사항에 대해서 미리 이렇게 처리해라 라고 만들어 놓는 것
1. if문 (혹시라도 이런 값이 들어오면, 이런 상화이 발생하면 이렇게 처리해라)
하지만 if문만 가지고는 다양한 예외처리를 하기에는 어렵다.
2. try~catch (예외가 발생한 상황에서 바로 예외처리)


예외가 발생할만한 상황에 대해서는 try 안에 넣어줘야 한다
(문자를 입력할 때 에러 발생)


	Scanner sc = new Scanner(System.in);
	
	System.out.println("--- 나눗셈 프로그램---");
	System.out.print("첫번째 수 입력 : ");
	int var1 = sc.nextInt();
	System.out.print("두번째 수 입력 : ");
	int var2 = sc.nextInt();
	try {
		System.out.println("결과 : "+(var1/var2));
	}catch(ArithmeticException e) {
		System.out.println("0으로 나눌 수 없습니다~!!");
	}catch(InputMismatchException f) {
		System.out.println("정수만 입력해주세요~!!");
	}

	System.out.println("프로그램 종료");

예외처리 해줬는데도 문자를 넣었을 때 계속 예외 발생하는 이유
	System.out.print("첫번째 수 입력 : ");
	int var1 = sc.nextInt();
	System.out.print("두번째 수 입력 : ");
	int var2 = sc.nextInt();
가 try문 밖에 있기 때문에 예외처리가 되지가 않았다.

	System.out.println("--- 나눗셈 프로그램---");
	try {
		System.out.print("첫번째 수 입력 : ");
		int var1 = sc.nextInt();
		System.out.print("두번째 수 입력 : ");
		int var2 = sc.nextInt();
		System.out.println("결과 : "+(var1/var2));
	}catch(ArithmeticException e) {
		System.out.println("0으로 나눌 수 없습니다~!!");
	}catch(InputMismatchException f) {
		System.out.println("정수만 입력해주세요~!!");
	}

	System.out.println("프로그램 종료");
}
이렇게 바꿔줘야 한다.


캐치를 여러개 쓸 때 주의해야 할 점 
예외들이 서로 상속관계일 때에는 후속클래스들이 먼저 기술이 돼야 한다.
Exception이 먼저 오면 Exception이 모든 에러 다 처리하기 때문에
아래에 오는 에러들은 처리할 수 없게 된다.

객체들을 만들어서 사용 할 때
객체에 따라 사용 후 냅둬도되는애들, 객체 연결을 닫아줘야 하는 애들
FileReader -> 파일을 여는 애들
파일을 열고 작업이 끝나면 연결을 끊어줘야지 계속 열어두면 안됨
이런것들을 대부분 finally에서 close()처리해줌 (예외가 나든 안나든 연결을 끊어줘야하기 때문에)

try~with~resource 구문
finally에서 작성되었던 close()처리를 생각하고 자동으로 close 처리 되게 하는 문장

		try(BufferedReader br 
				= new BufferedReader(new FileReader("D:/test.txt"))){
			String s;
			while((s = br.readLine()) != null) {
				System.out.println(s);
			}
		} catch(FileNotFoundException e) {
			System.out.println("파일이 없습니다.");
		} catch(IOException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} 
	
------------------------------------------------------------------------------------------

Exception 처리를 호출한 메소드에게 위임
메소드 선언 시 throws ExceptionalName문을 추가하여 호출한 상위 메소드에게 처리 위임
(나는 아직까지 그 메소드를 만드는 당시에는 예외처리를 어떻게 할지 모르겠음
-> 메소드를 호출하는 놈한테 넘겨줌)
계속 위임하면 main()메소드까지 위임하게 되고 거기서도 처리되지 않는 경우 비정상 종료 됨


* throw로 예외 던지기

public class Exam02 {
	public void method01() throws IOException {	// 예외처리를 method 호출하는 사람한테 넘기겠다
		throw new IOException();	// 예외를 무조건 발생시킴
	}
	
	public void method02() throws IOException {
		method01();
	}
	
	public void method03() throws IOException {
		method02();
	}
}


public class Run {

	public static void main(String[] args) throws IOException {
		Exam02 ex = new Exam02();

		ex.method03();
	=> 또 예외 넘겨주면 오류 발생		
		
//		try {
//			ex.method03();
//		} catch (IOException e) {
//			System.out.println("예외처리 완료됨");
//		}
	=> try/catch 해주면 오류 발생 안함

	}

}
------------------------------------------------------------------------------------------

Exception과 오버라이딩
오버라이딩 시 throws 하는 Exception은 같거나 더 구체적인 것(후손), 처리 범위가 좁아야 함

오버라이딩 : 상속관계일 때 부모한테 정의 돼 있던 것을 자식이 새로 정의하는 것
메소드 자체를 새롭게 정의하기 때문에 거기에서 예외처리 돼있는 것도 새롭게 정의 할 수 있다.


사용자 정의 예외
Exception 클래스를 상속받아 예외 클래스를 작성하는 것으로
Exception 발생하는 곳에서 throw new 예외클래스명()으로 발생

------------------------------------------------------------------------------------------

* 입출력(IO)

Input과 Oupt의 약자, 컴퓨터 내부 또는 외부 장치와 프로그램 간의 데이터를 주고 받는 것
장치와 입출력을 위해서는 하드웨어 장치에 직접 접근이 필요한데
다양한 매체에 존재하는 데이터들을 사용하기 위해 입출력 데이터를 처리할 공통적인 방법으로 스트림 이용


데이터를 입출력
단순히 키보드로부터 입력을 받는다던지 등이 아닌
파일로부터 입력받을 수 있고
프로그램에 있던 데이터를 파일에 쓸 수도 있고
프로그램에 있던 데이터를 DB에 쓸 수도 있고.

입력 : 프로그램으로 데이터가 흘러 들어온다. 
(키보드, 파일, 프로그램 등 외부자원으로부터 프로그램으로 데이터가 흘러들어옴)
출력 : 프로그램에서 도착지로 데이터가 흘러나간다.

이를 위해서는 연결이 돼있어야 한다.
어떻게 ?
직접적 접근을 명령어로 다 만들어 줄 순 없다.
하드웨어 장치들과 프로그램 간에 입출력 데이터를 처리할 공통적인 방법으로 스트림을 이용한다.
자바 뿐만 아니라 대부분의 프로그래밍 언어에서 스트림을 이용

------------------------------------------------------------------------------------------

* 스트림(Stream)

데이터가 흘러다닐 수 있는 가상의 통로를 하나 만듬

입출력 장치에서 데이터를 읽고 쓰기 위해서 만들어진 가상의 통로
모든 스트림은 단방향이며 각각의 장치마다 연결할 수 있는 스트림 존재
하나의 스트림으로 입출력을 동시에 수행할 수 없으므로 동시에 수행하려면 2개의 스트림 필요

입력 받기 위한 통로 : 입력스트림(InputStracm)
출력 하기 위한 통로 : 출력스트림(OutputStream)

우리가 만약에 키보드와 프로그램 사이에 입력스트림을 열어놓음
근데 나는 A파일에서도 입력 받고 싶어
키보드와 연결 돼있는 것을 A파일이 쓸 수는 없음
키보드와 별개로 A파일이랑 프로그램이랑 연결하는 별도의 스트림을 따로 만들어야 함
B파일에서도 입력 받고 싶어
B파일과의 스트림도 따로 만들어야 한다.
같은 입력이라도 어떤 장치냐에 따라서 따로따로 스트림을 만들어줘야한다.


스트림이라는 것은 우리프로그램 혼자서 쓰는 것이 아니다.
다른 프로그램도 스트림을 만들어서 사용 할 수 있어야 한다.
스트림은 운영체제가 관리 해야 한다.
(다른 프로그램도 키보드를 쓰게 해줘야 함)
잠시 입력받고, 잠시 출력받기 위해 스트림을 빌림
다 썼으면 연결을 끊어서 반납을 해줘야 한다.
만약 안끊은 상태에서 프로그램을 사용하면 연결돼있는 애들이 굉장히 많아짐
운영체제에서는 관리해야할 스트림이 많아짐 -> 프로그램 성능이 안좋아짐, 운영체제 자체가 꺼짐

------------------------------------------------------------------------------------------

도대체 스트림을 어떻게 써야해?
사용하는 방법은 언어에 따라서 조금씩 다르다.

* 자바 입출력

통로를 뚫기위해 여러가지 클래스를 사용한다.
자바에서는 입출력을 위해 분류별 스트림 클래스를 제공해 줌
외부자원과 스트림부터 연결시키고, 그 다음에 읽거나 쓰기 작업 수행

1. 스트림 클래스에 대한 객체 생성
- 외부 자원과의 통로 만들기
2. 입출력 수행
- 객체명.읽기용메소드(); or 객체명.쓰기용메소드();
System.out.println();
scan.next();


----------------------------------------------------------------------------------------

* 스트림 종류

- 전송 방향에 따른 분류
입력 스트림 : 디바이스로부터 데이터를 읽어오는 스트림
출력 스트림 : 디바이스로 데이터를 출력하는 스트림

- 전송 단위에 의한 분류
바이트 스트림 : 1Byte 단위로 입/출력 하는 스트림 (사운드, 동영상 바이너리 파일 입출력 할 때 많이 사용)
문자 스트림 : 한 문자(2Byte) 단위로 입/출력하는 스트림 (텍스트 문서 사용하기 위한 용도로 많이 사용)
여기서 문자열 스트림은 유니코드로 입력되고, 바이트 스트림은 바이트 단위로 입력된다. (8bit)

* 유니코드(unicode)란,
각 나라별 언어를 모두 표현하기 위해 나온 코드 체계이다. 
사용중인 운영체제, 프로그램, 언어에 관계없이 문자마다 고유한 코드 값을 제공하는 새로운 개념의 코드이다.
모든 문자를 16비트로 표현하며 최대 65,536자를 표현할 수 있다.
* 바이트(byte)란,
컴퓨터가 처리하는 정보의 기본 단위로, 하나의 문자를 표현하는 단위이다. 
8개 혹은 9개의 bit를 묶어서 표현하며, 
1byte 당 하나의 문자를 표현하지만 한글과 같은 동양권의 문자는 2개의 바이트로 표현된다.


- 용도에 의한 분류
1차 스트림(주 스트림) : 디바이스에 직접 연결되는 스트림, 통로를 열어주는 기능을 수행 함
(기반 스트림 클래스라고도 함) 단순한 기능만 들어있기 때문에 사용하기에 불편한 부분이 있음
2차 스트림(보조 스트림) : 1차 스트림과 연결을 통해 디바이스에 연결되는 스트림
(1차 스트림을 더 쉽게 사용하기 위해서)
보조 스트림은 독단적으로 사용될 수 없음, 기본 스트림을 통해야만 가능함
통로가 열려있는 상태에서 조금 더 편하게 사용하기 위함

바이트 단위
InputStream
바이트 기반 입력 스트림의 최상위 클래스로 추상클래스임
InputStream
FileInputStream , BufferedInputStream, DataInputStream

OutputStream
바이트 기반 출력 스트림의 최상위 클래스로 추상클래스임
OutputStream
FileOuputStream, BufferedOuputStream, DataOutputStream, PrintStream

문자 단위
Reader
문자 기반 입력 스트림의 최상위 클래스로 추상클래스임
Reader
FileReader, InputStreamReader, BfferedReader

Writer
문자 기반 출력 스트림의 최상위 클래스로 추상클래스임
Writer
FileWriter, OutputStreamWriter, BufferedWriter, PrintWriter



----------------------------------------------------------------------------------------

* File 클래스

파일을 처리할 수 있는 클래스
파일 시스템의 파일을 표현하는 클래스
파일 크기, 파일 속성, 파일 이름 등의 다양한 정보를 관리할 수 있는 클래스
단순히 파일의 정보와 파일 생성 및 삭제 기능을 제공하기 위함
파일에 있는 내용에 있는 정보를 읽거나 출력하지는 못함


예)
1. 새로운 파일 만들고 속성 알아내기

import java.io.File;
import java.io.IOException;

import javax.activation.MimetypesFileTypeMap;

public class IOExam01 {
	public void method01() {
	System.out.println("----- 새로운 파일 생성하기 -----");
	File file = new File("C:\\iotest\\test01.txt"); // 이 파일에 대한 정보를 읽어와서 우리가 사용할 수 있게 해줌
	// 오직 이 file은 C:\\iotest\\test01.txt과만 연결됨
	if(!file.exists()) { // file.exists() : 파일이 있으면 true, 없으면 false값 돌려줌
		// 파일이 존재하지 않는다면 try 해라
		try {
		file.createNewFile();
			System.out.println("파일이 생성되었습니다.");
		} catch (IOException e) {
		System.out.println("파일을 생성할 수 없습니다.");
		}
	}

	// 파일 정보 출력
	System.out.println("파일명 : "+file.getName());
	System.out.println("파일경로 : "+file.getPath());
	System.out.println("파일크기  : "+file.length());
	// 파일 종류 확인
	System.out.println("파일종류 : "+
			new MimetypesFileTypeMap().getContentType(file)); 
	// MimetypesFileTypeMap 클래스 안의
	//getContentType 메소드를 사용하면 내가 원하는 파일의 종류를 알 수 있다.

// File이라는 클래스는 실제 연결하는 통로를 만드는게아니라 
그냥 속성을 알게 해주는 것 뿐이기 때문에 파일 닫아줄 필요 없음

	}
}


실행

import com.kh.exam01.model.IOExam01;

public class Run {

	public static void main(String[] args) {
		IOExam01 ioe = new IOExam01();
		
		ioe.method01();
	
	}

}



2. 기존에 있던 파일 속성 알아내기

public void method02() {
	System.out.println("----- 기존 파일 확인하기 -----");
	File file = new File("c:\\iotest\\오로라.jpg");
	
	if(!file.exists()) { 
		try {
			file.createNewFile();
			System.out.println("파일이 생성되었습니다.");
		} catch (IOException e) {
		System.out.println("파일을 생성할 수 없습니다.");
		}
	}
	// 파일 정보 출력
	System.out.println("파일명 : "+file.getName());
	System.out.println("파일경로 : "+file.getPath());
	System.out.println("파일크기  : "+file.length());
	// 파일 종류 확인
	System.out.println("파일종류 : "+
		new MimetypesFileTypeMap().getContentType(file)); 
		
	}

실행하기
public class Run {
	public static void main(String[] args) {
		IOExam01 ioe = new IOExam01();
		ioe.method02();
		
	}
}

----------------------------------------------------------------------------------------

* FileInputStream
파일로부터 바이트 단위로 읽을 때 사용
그림, 오디오, 비디오, 텍스트 파일 등 모든 종류의 파일 읽기 가능
InputStream의 하위 클래스로 InputStream과 사용 방법 동일

- 객체 생성
먼저 내가 열고 싶은 파일을 이용해서 객체를 생성해줘야 함
객체를 생성해야 파일과 프로그램이 스트림으로 연결됨
만약 파일이 존재하지 않으면 FileNotFoundException이 발생하므로 예외처리 필수
FileInputStream fis = new FileInputStream("C:\data\test.txt");


* FileOutputStream
파일에 바이트 단위로 저장할 때 사용
그림, 오디오, 비디오, 텍스트 파일 등 모든 종류의 데이터를 파일로 저장
OutputStream의 하위 클래스로 OutputStream과 사용 방법 동일

- 객체 생성
FileOutputStream객체가 생성될 때 파일과 직접 연결 됨
만약 파일이 존재하지 않으면 자동으로 생성하지만
이미 파일이 존재하는 경우 파일을 덮어쓰는 단점이 있음
FileOutputStream fos = new FileOutputStream("C:\data\test.txt");

덮어 쓰는게 아니라 계속해서 이어쓰고 싶다면
뒤에 인자값으로 true를 더 넣어줘야함
FileOutputStream fos = new FileOutputStream("C:\data\test.txt", true);


* FileReader
텍스트 파일로부터 문자 단위로 읽을 때 사용
텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 읽기 불가능
Reader의 하위 클래스로 Reader와 사용 방법 동일

- 객체 생성
FileReader객체가 생성될 때 파일과 직접 연결 됨
만약 파일이 존재하지 않으면 FileNotFoundException이 발생하므로 예외처리 필수
파일 객체를 만들어서 객체에 파일의 정보담음
파일의 객체를 이용해서 생성 해도 됨
1. 
FileReader fr = new FileReader("C:\data\test.txt");

2.
File file = new File("C:\data\test.txt");
FileReader fr = new FileReader(file);

3.
FileReader fr = new FileReader(new File("C:\data\test.txt"));



* FileWriter
텍스트 파일로부터 문자 단위로 저장할 때 사용
텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 저장 불가능
Writer의 하위 클래스로 Writer와 사용 방법 동일

- 객체 생성
FileWriter 객체가 생성될 때 파일과 직접 연결 됨
객체를 생성할 때 파일이 존재하지 않으면 자동으로 생성하지만
이미 파일이 존재하는 경우 파일을 덮어쓰는 단점이 있음
만일 기존 파일에 이어서 계속 작성하고 싶다면 뒤에 true 붙여주기

FileWriter fw = new FileWriter("C:\data\test.txt");

만일 기존 파일에 이어서 계속 작성하고 싶다면 아래 예제처럼 가능
FileWriter fw = new FileWriter("C:\data\test.txt", true);


----------------------------------------------------------------------------------------

FileOutputStream 예제

public void method03() {
	System.out.println("----- 파일 출력 : FileOutputStream -----"); 
	// 프로그램 기준으로 생각, 출력 : 프로그램으로부터 내보내는 것, 
	// 파일 입력: 파일로부터 입력받는 것
		
	// 파일 출력 스트림 참조변수 생성 (try문 밖에서도 사용할 수있도록)
	// 선언하고 null을 넣어주는 것을 권장한다.
	FileOutputStream fos = null; 
	
	try {
		// 파일 출력 스트림 객체 생성
		
		//방법1
		// 지정된 이름의 파일이 없으면 새로 생성, 파일이 있으면 덮어쓰기
		//fos = new FileOutputStream("C:\\iotest\\test02.txt");

		//지정된 이름의 파일이 없으면 새로 생성, 파일이 있으면 이어쓰기
		//fos = new FileOutputStream("C:\\iotest\\test02.txt", ture);
		
		//방법 2
		// File 객체 생성 후 인자로 넘겨주는 것도 가능 - 파일 관리에 용의함 (속성 정보 가져오기도 가능, 파일 정보를 넘겨주기도 가능)
		File file = new File("C:\\iotest\\test02.txt");
		fos = new FileOutputStream(file); 
		
		// 파일에 내용 쓰기
		// 바이트 기반으로 출력해야 하기 때문에 바이트타입의 데이터를 전달해야 함
		
		System.out.println(("Hello".getBytes())[4]);
		fos.write("Hello".getBytes()); // Hello라는 문자열을 byte로 바꿔서 알려달라
		fos.write("12345\n".getBytes());
		fos.write("Welcome".getBytes());

		System.out.println("파일 저장 완료");
	
	} catch (FileNotFoundException e) {
		System.out.println("파일 저장 실패");
	} catch (IOException e) {
		System.out.println("파일 내용 쓰기 실패");
	}  finally {
		// 파일 출력 스트림 연결 종료
		try {
			fos.close();
		} catch (IOException e) {
			System.out.println("파일 종료 실패");
	
		}
	}

실행하기
public class Run {

public static void main(String[] args) {
	IOExam01 ioe = new IOExam01();
	ioe.method03();
		
	}
}



----------------------------------------------------------------------------------------
FileInputStream 예제

public void method04() {
		System.out.println("----- 파일 입력 : FileInputStream -----");
		try(FileInputStream fis = new FileInputStream("C:\\iotest\\test02.txt")){
			// read()메소드로 파일 내용 읽어옴
			// 매개변수 없는 read()메소드 사용 : 1byte를 읽어와서 바이트값으로 리턴(아스키코드값)으로 리턴
			System.out.println(fis.read());	// 첫글자 H의 아스키코드값 : 72
			// char형으로 강제 형변환
			System.out.println((char)fis.read());	// 두번째 글자 e의 아스키코드값 : 101
			// 바이트형태(아스키코드값)의 데이터를 입력받아서 문자형태로 표현
			System.out.write(fis.read());	//세번째 글자 l의 아스키코드값을 가져와서 문자형태로 출력
			System.out.println();
			
			// 읽어온 내용을 배열에 저장
			byte [] buffer = new byte[100];	// 입력값을 임시로 저장할 배열 선언
			// 입력스트림에 남은 모든 내용을 읽어와서 바이트형 배열에 저장
			fis.read(buffer);
			// 배열 내용 확인 1
			for(int i = 0; buffer[i] != 0 ; i++) {
				System.out.print((char)buffer[i]);
			}
			System.out.println();
			// 배열 내용 확인 2
			System.out.write(buffer);
			System.out.println();
			
		} catch (FileNotFoundException e) { // 파일을 읽지 못했을 때
			System.out.println("파일 열기 실패");
		} catch (IOException e1) { // 파일을 닫지 못했을 때 
			System.out.println("파일 닫기 실패");
		}
		
	}	
----------------------------------------------------------------------------------------
FileInputStream 예제2

public void method05() {
		System.out.println("----- 이미지 파일 입력 : FileInputStream -----");
		File file = new File("C:\\iotest\\오로라.jpg");
		
		try(FileInputStream fis = new FileInputStream(file)) {
			// 버퍼크기 어떻게 해야할지 몰라서 이미지 파일 크기 알아내기
			System.out.println(file.length()); 
			// 이미지 파일 내용을 저장할 임시 변수 생성
			byte[] buffer = new byte[(int) file.length()];
			// 파일 내용을 임시 변수에 저장
			fis.read(buffer);
			// 임시 변수에 저장된 파일 내용 출력
			System.out.write(buffer);
		} catch (IOException e1) {
			System.out.println("이미지 파일 입력 오류");
		}
	}

----------------------------------------------------------------------------------------
FileWriter 예제

	public void method06() {
		System.out.println("----- 파일 출력 : FileWriter -----");
		try(FileWriter fw = new FileWriter("C:\\iotest\\test03.txt")) {
			fw.write("HiHi\n");
			fw.write("Welcome");
			System.out.println("파일 출력 완료");
		} catch (IOException e) {
			System.out.println("파일 쓰기 실패");
		}

	}

----------------------------------------------------------------------------------------
FileReader 예제

	public void method07() {
		System.out.println("----- 파일 입력 : FileReader -----");
		try(FileReader fr = new FileReader("C:\\iotest\\test03.txt")) {
			// 매개변수 없이 쓰면 한개 문자 읽어서 정수형태로 리턴
			System.out.println(fr.read()); // 72라고 나오지만 2byte를 읽어온다
			// char형 배열에 읽어온 파일 내용 저장
			char [] str = new char[100];
			fr.read(str);
			// 배열 내용 출력
			System.out.println(str);
		} catch (IOException e) {
			System.out.println("파일 입력 실패");
		}
	}

----------------------------------------------------------------------------------------

* 헷갈리는 것들

바이트스트림은 바이트 단위로 처리 1byte 단위로 처리(아스키코드에 있는 애들 가능, 아스키로 표현하면 1바이트)
파일 리더는 문자형 데이터를 처리하기 위해서 만들어진 클래스
문자형 데이터를 2byte단위로 처리
메모장 자체는 문자 하나하나 영문자 숫자, 1byte로 처리
한글 -> 하나당 1바이트로 처리 못함 2byte로 처리 할 거임
메모장 자체는 그런데 메모장에 있는 데이터를 자바에서 가지고 갈 때
inputstream같은경우에는 한글이 들어있든 뭐가 들어있든 한글자당 1byte로 가져옴
파일 리더는 메모장은 1바이트로 처리하는데 자기는 2byte로 처리함 -> 그냥 한개한개 글자를 2byte로 가져옴

write는 바이트 단위로 저장된 것만 출력 가능 (파일에 내용 쓰기)
바이트 기반으로 출력해야 하기 때문에 바이트타입의 데이터를 전달해야 함



FileNotFoundException -> 파일이 없어서 못읽어옴

----------------------------------------------------------------------------------------

얘네들만 가지고 파일에 있는걸 다 가져오려고 하다보니까 자유롭게 입출력하기에는 힘든 부분이 있다.
얘네들을 도와주기 위한 것이 보조 스트림

* 보조 스트림
-> 입력스트림 보조스트림 -> 프로그램 -> 보조스트림 출력스트림 ->

스트림의 기능을 향상시키거나 새로운 기능을 추가하기 위해 사용
보조 스트림은 실제 데이터를 주고 받는 스트림이 아니기 때문에 입출력 처리 불가능
기반 스트림을 먼저 생성한 후 이를 이용하여 보조 스트림 생성

* 보조 스트림 종류
문자 변환(InputStreamReader / OutputStreaWriter),
입출력 성능(BufferedInputStream / BufferedOutputStream),
기본 데이터 타입 출력(DataInputStream, DataOutputStream),
객체 입출력(ObjectInputStream / ObjectOutputStream)등의 기능을 제공하는 보조스트림이 있음

FileInputStream fis = new FileInputStream("sample.txt");
// 기반 스트림 생성
BufferedInputStream bis = new BufferedInputStream(fis);
// 보조스트림 생성
보조스트림 bis 스트림을 fis 스트림에 붙여서 쓰겠다.

bis.read();  // 보조스트림으로 데이터 읽어옴 

----------------------------------------------------------------------------------------

* 문자 변환 보조 스트림
소스 스트림이 바이트 기반 스트림이지만(영상이나 사진등을 가져올 수 있지만) 데이터가 문자일 경우 사용(텍스트일때 형변환 시켜줘야 했음)
Reader와 Writer는 문자 단위로 입출력을 하기 때문에 데이터가 문자인 경우에는 바이트 기반 스트림보다 편리하게 사용 가능

* 성능 향상 보조 스트림
느린 속도로 인해 입출력 성능에 영향을 미치는 입출력 소스를 이용하는 경우 사용,
입출력 소스와 직접 작업하지 않고 버퍼에 데이터를 모아
한꺼번에 작업을 하여 실행 서능 향상(입출력 횟수 줄임)

* 기본 타입 입출력 보조 스트림
기본 자료형 별 데이터 읽고 쓰기가 가능하도록 기능 제공
단, 입력된 자료형의 순서와 출력될 자료형의 순서 일치

(프로그램에서 사용하는 기본데이터 타입을 이용해서 데이터를 입력받거나 내보낼 수있도록 하는 것)

* 객체 입출력 보조 스트림
객체를 파일 또는 네트워크로 입출력 할 수 있는 기능 제공
단, 객체는 문자가 아니므로 바이트 기반 스트림으로 데이터를 변경해주는 직렬화 필수

학생이라는 객체가 하나 있음
학생 안에는 name, age, tel, 주소 등이 있음
원래라면 이것을 파일로 내보내기 위해서는 name 따로, age 따로, tel 따로, 주소 따로 내보내는 코드를 따로따로 다 적어줘야 함
파일을 가져올 때도 하나하나 따로따로 가져와야함
객체를 통째로 내보내거나 통째로 가지고 올 수 있도록 하는 게 객체 입출력 보조 스트림임

* 직렬화 (Serialization)
객체를 스트림을 통해 전송하기 위해서 
큰덩어리를 byte단위로 잘라주는 작업
안에 안에 있는 것들을 일자로 쭉 나열해 주는 것이라고 생각하면 됨

Serializable 인터페이스를 implements 하여 구현
객체 직렬화 시 private 필드를 포함한 모든 필드를 바이트로 변환하지만
transient키워드를 사용한 필드는 직렬화에서 제외 (직렬화를 안할 필드에 대해서 지정해주는 것)


* 역직렬화 (Deserialization)
이렇게 바이트 형태로 잘려져있는 데이터를 가지고와서 다시 객체화 시키는 것
일자로 쭉 나열돼 있던것을 다시 객체로

직렬화된 객체를 역직렬화할 때는 직렬화 했을 때와 같은 클래스 사용
단, 클래스 이름이 같더라도 클래스 내용이 변경된 경우 역질렬화 실패

----------------------------------------------------------------------------------------

readUTF() 문자열로 인식하는 것을 하나 다 가져옴
hello
hihi
1234
있으면 hello 가져옴

보조 스트림 예제

public void method08() throws IOException {
		System.out.println("----- 보조 스트림 : DataOutputStream -----");
		// 데이터 출력 보조 스트림 생성
		FileOutputStream fos = new FileOutputStream("C:\\iotest\\test04.txt");
		// 데이터 출력 보조 스트림 생성
		DataOutputStream dos = new DataOutputStream(fos);
		// 파일에 데이터 쓰기
		dos.writeUTF("Hello world");
		dos.writeUTF("안녕하세요");
		dos.writeInt(30);
		// 스트림 객체 닫기
		dos.close();
		fos.close();
		
		System.out.println("----- 보조 스트림 : DataInputStream -----");
		// 파일 입력 스트림 생성
		FileInputStream fis = new FileInputStream("C:\\iotest\\test04.txt");
		// 데이터 입력 보조 스트림 생성
		DataInputStream dis= new DataInputStream(fis);
		// 파일에서 데이터 읽어오기 
		System.out.println(dis.readUTF());
		System.out.println(dis.readUTF());
		System.out.println(dis.readChar());
		// 스트림 객체 닫기
		dis.close();
		fis.close();
	}

실행하기
public class Run {
	public static void main(String[] args) {
		IOExam01 ioe = new IOExam01();
		
		try {
			ioe.method08();
		} catch (IOException e) {
			System.out.println("예외발생");
		}
	}
}


----------------------------------------------------------------------------------------

객체 입출력 보조 스트림 예제
※ 오류발생함 , 오류 고치기
​
Student 클래스 생성
public class Student {
// 필드부
//[접근제한자] [키워드] <데이터타입> <필드명> [ = <초기값>];
private String name;
private int age;
private String tel;
private String addr;

// 생성자부
//[접근제한자] [키워드] <클래스명>([매개변수,..]){[실행내용;...}
// 기본 디폴트 생성자
public Student() {}
// 매개변수 생성자
public Student(String name, int age, String tel, String addr) {
this.name = name;
this.age = age;
this.tel = tel;
this.addr = addr;
}

// 메소드부 
// Getter/Setter 메소드
public String getName() { return this.name; }
public void setName(String name) { this.name = name; }
public int getAge() { return age;}
public void setAge(int age) { this.age = age; }
public String getTel() { return tel; }
public void setTel(String tel) { this.tel = tel;}
public String getAddr() { return addr; }
public void setAddr(String addr) { this.addr = addr; }

// Object클래스에 있는 toString 메소드 오버라이딩
// 필드의 내용을 한 번에 출력해서 확인하기 위한 용도
public String toString() {
return "이름 : "+name+", 나이 : "+age+", 전화번호 : "+tel+", 주소 : "+addr;
//return "[name=>"+name+", age=>"+age+", tel=>"+tel+", addr=>"+addr+"]";
}
}




실행부

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

import com.kh.exam02.model.vo.Student;

public class Run {

public static void main(String[] args) {
// Student st : 클래스의 참조변수를 생성
// = new Student() : 객체 생성 후 주소를 참조변수에 저장
Student st = new Student("홍길동",20,"01012341234","서울시 종로구");
// 객체의 각 필드 내용 출력
System.out.println(st.toString());



// 객체를 파일로 저장
// 파일 출력 스트림, 객체 출력 보조 스트림에 대한 참조 변수 생성
FileOutputStream fos = null;
ObjectOutputStream oos = null;
// 파일 입출력 시 예외 발생할 수 있기 때문에 반드시 예외처리를 해줘야 함
try {
// 파일 출력 스트림 객체 생성(주 스트림 : 실제 통로를 만들어주는 스트림)
fos = new FileOutputStream("C:\\iotest\\student.txt");
// 객체 출력 보조 스트림 객체 생성
oos = new ObjectOutputStream(fos);

// 보조 스트림을 이용해서 객체를 파일로 쓰기
oos.writeObject(st);
System.out.println("저장완료");
} catch (IOException e) {
System.out.println("예외발생");
} finally {
try {
oos.close();
fos.close();
} catch (IOException e) {
e.printStackTrace();
}
}
}
}
