2020년 11월 12일

컬렉션 -> 자바에서 제공하는 자료구조를 담당하는 프레임워크


- List(상위클래스)

선형구조 = 데이터를 정리할 때 선의 형태로 일자로 쭉
자료들을 순차적으로 나열한 자료구조로 인덱스로 관리하며, 중복해서 객체 저장 가능
구현 클래스로 ArrayList와 Vector, LinkedList(하위클래스)가 있음

같은 형태의 데이터를 여러개 쭉 붙여서 사용하는 배열
(배열의 불편함
1. 같은 자료형만 가능
2. 크기 변경 불가능
3. 데이터를 중간에 추가하거나 삭제 하는 것에 대한 불편함)

각각의 리스트에 대한 특징들, 언제 어떤 리스트를 쓰는 것이 좋을지 아는 것이 중요함.


- List 계열 주요 메소드
ArrayList랑 Vector은 앞에서 배운 배열과 거의 똑같다고 생각하면 됨
LinkedList는 내부적으로 동작되는 방식이 조금 다르다.

- ArrayList
List의 후손으로 초기 저장용량은 10으로 자동 설정/ 따로 지정 가능
저장 용량을 초과한 객체들이 들어오면 자동으로 증가 / 고정도 가능
동기화(Synchronized)를 제공하지 않음 (쓰레드에 대해서 안전하지 않다, 백터는 동기화를 제공한다.)


--------------------------------------------------------------------------------


기존 배열을 사용하여 데이터 삽입, 삭제 등

String[] arr = new String [3];	// 배열 사용 - 데이터 여러개 저장

// 배열에 데이터 추가
arr[0] = "hihi";
arr[1] = "bye";
arr[2] = "hello";


//기존 크기보다 더 많은 데이터 추가
 //arr[3] = "hahaha"; // 컴파일은 되는데 실행중 오류 발생 -> 런타임(Runtime) 오류 발생
String[] tmpArr = new String[5];



- 공간크기를 키워서 새로 만든 배열에 기존 데이터 삽입
for(int i=0 ; i<arr.length ; i++) {
	tmpArr[i] = arr[i];
}

// 기존에 사용하던 배열 참조변수에 새로운 배열 대입
arr = tmpArr; // 새로만든 배열의 공간의 주소를 저장하도록

// 배열에 데이터 삽입
int insertIndex = 1 ; // 삽입하고 싶은 위치
// 실제 저장된 데이터의 마지막 인덱스 알아내기
for(int i=0 ; i<arr.length; i++) {
	if(arr[i] == null) { // null 값을 만날 때를 찾음
		// 마지막 데이터부터 한칸씩 뒤로 이동
		for(int j = i; j>insertIndex ; j--) { 
			arr[j] = arr[j-1]; // 뒷 자리에 앞 값 대입
		}
		// 삽입할 데이터 입력
		arr[insertIndex] = "insertData";
		
		break;
	}
}
		
// 출력
	for(int i=0 ; i<arr.length; i++) {
	System.out.println("arr 삽입 후 값 : "+ arr[i]);
}	



- 배열 내 데이터 삭제

int deleteIndex = 2; // 인덱스[2] 값을 삭제하겠다.

for(int i = deleteIndex; i<arr.length && arr[i] != null; i++) { // 내 값을 내 전 인덱스에 넘겨주기
// 알아서 덮어써지기 때문에 null값 넣은 다음에 뒤에서 덮을 필요 없다.
	if(i == arr.length - 1)
	arr[i] = null; // 마지막 인덱스는 뒤에 값이 없기 때문에 null 넣어줌
	else		
	arr[i] = arr[i+1];	
}
	
// 출력
for(int i=0 ; i<arr.length; i++) {		
System.out.println("arr 삭제 후 값 : "+ arr[i]);
}	


=> 복잡하다


--------------------------------------------------------------------------------

ArrayList 기본 사용하기

System.out.println("---------- ArrayList 기본 사용 ----------");

// ArrayList 객체 생성
ArrayList aList1 = new ArrayList(2); // 크기를 지정하면서 리스트 객체 생성 (2칸 짜리 공간만들겠다)
ArrayList aList2 = new ArrayList(); // 크기를 지정하지 않고 리스트 객체 생성 -> 10칸 짜리 자동으로 만들어짐
	
System.out.println(aList1.size()); // 리스트 내 데이터 개수, 이 안에 데이터 몇개 들어있는지 알고싶어
System.out.println(aList1); // 리스트 내 저장된 모든 데이터를 콤마(,)로 구분해서 대괄호([]) 안에 모두 나열해줌
System.out.println(aList2.size()); // 아무 값도 안들어 있음
System.out.println(aList2); // []

// 리스트에 데이터 추가 - 가장 마지막 위치에 추가
// 서로 다른 자료형 값 저장 가능
aList1.add(10);	// 리스트에 정수값 추가
aList1.add("Hello");	// 리스트에 문자열 추가
aList1.add(4.7);	// 리스트에 실수값 추가

System.out.println(aList1); // [10, Hello, 4.7]
System.out.println(aList1.size()); // 3 - 리스트 내 데이터 개수

// 리스트 내 데이터 사용 - 객체명.get(인덱스) 메서드를 사용
System.out.println("[0]번 인덱스 값: "+aList1.get(0));	// 10
System.out.println("[1]번 인덱스 값: "+aList1.get(1));	// Hello
System.out.println("[2]번 인덱스 값: "+aList1.get(2));	// 4.7

// 반복문 활용
	for(int i=0 ; i<aList1.size(); i++) {
	System.out.println(i+1+"번째 값 : "+aList1.get(i));
	}	
	/*
	 * 1번째 값 : 10
	 * 2번째 값 : Hello
	 * 3번째 값 : 4.7
	 */
	
// 향상된 반복문
	// Object는 모든 변수, 객체들의 조상
	for(Object tmp : aList1 ) { 
	System.out.println(tmp);
	}
	/* 
	 * 10
	 * Hello
	 * 4.7
	 */
	

// 리스트에 데이터 삽입 - 중간 위치에 값 삽입
aList1.add(1, "안녕");		// 1번 인덱스에 "안녕" 문자열 삽입
System.out.println(aList1); // [10, 안녕, Hello, 4.7]

// 리스트 내 데이터 수정
aList1.set(1, "안녕하세요");	// 1번 인덱스 값을 "안녕하세요"로 변경 
System.out.println(aList1);	// [10, 안녕하세요, Hello, 4.7]

// 리스트 내 특정 데이터에 대한 인덱스 값 확인 - 데이터를 못찾으면 -1 반환, 찾으면 해당 인덴스 값을 반환
System.out.println(aList1.indexOf("Hello"));	// 2
System.out.println(aList1.indexOf("hi"));	// -1
	
// 리스트 내 특정 데이터의 존재 여부 검사 - 데이터가 있으면 ture, 없으면 false 반환
System.out.println(aList1.contains("Hello"));	// true
System.out.println(aList1.contains("hi"));	// false

// 리스트 내 특정 데이터 삭제
aList1.remove(2);	// 2번 인덱스 값 삭제
System.out.println(aList1); // [10, 안녕하세요, 4.7]
System.out.println(aList1.get(2)); // 삭제 후 원래 마지막 3번 인덱스 값이 2번 인덱스 값이 됨 
	
// 리스트 내 모든 데이터 삭제
aList1.clear();
System.out.println(aList1); // [] 

aList1에 다시 값을 추가해준다.	
aList1.add(10);
aList1.add(20);
aList1.add(30);
aList1.add(40);
aList1.add(50);

System.out.println(aList1); // [10, 20, 30, 40 ,50]

aList1.remove((Integer)20); // 20이라는 데이터가 삭제됨
20은 인티져이기 때문에 주소값의 20인지 객체 안의 20 인지 헷갈리게 된다
따라서 (Integer)로 형변환해서 사용해야 함.
System.out.println(aList1); // [10, 30, 40, 50]


aList2에 값을 추가해준다.
aList2.add(10);
aList2.add(40);

//aList1.removeAll(aList2); //aList1에 있는 aList2 값을 삭제해주겠다.	(삭제 할 값 자체를 aList2로 만들어준것, 컬렉션만 들어가야 하니까)
aList1.removeAll(aList1.subList(1, 3)); // 컬렉션 형태로 알려줘야한다. List 형태거나 Set 형태거나

System.out.println(aList1);	// [10, 50]

// ArrayList 객체 생성 시 초기값 지정
ArrayList al = new ArrayList(Arrays.asList("Hello",10,1.5,'가')); // 초기화하려면 리스트가 필요하다
System.out.println("al 값 : "+al);
	
ArrayList al2 = new ArrayList(al); //다른 리스트 만들어서 새로운 리스트의 생성자의 인자값으로 넣어주기
System.out.println("al2 값 : "+al);


--------------------------------------------------------------------------------

ArrayList 정렬하기

System.out.println("---------- ArrayList 정렬  ----------");
ArrayList list = new ArrayList();
	
// 리스트에 데이터 추가 - 추가한 순서대로 저장되어 있음
list.add(55);
list.add(23);
list.add(68);
list.add(43);
list.add(22);
	
System.out.println(list);	// [55, 23, 68, 43, 22]

 // 데이터 정렬
 Collections.sort(list);	// 기본 오름차순 정렬
 System.out.println(list);	// [22, 23, 43, 55, 68]
 //Collections.reverse(list);	// 내림차순 정렬
 list.sort(Collections.reverseOrder());
 System.out.println(list);	// [68, 55, 43, 23, 22]
		 
// 가급적이면 하나의 타입의 데이터만 담든지 캐스팅을 하든지


--------------------------------------------------------------------------------

ArrayList에 객체데이터를 담아 사용하기


Student라는 객체를 만든다.
public class Student {
	
// 필드부
private int classNumber;	// 학생 번호
private String name;	// 학생 이름
private int age;		// 학생 나이

// 생성자부
// 기본 생성자
public Student() {}
// 매개변수 생성자
public Student(int classNumber, String name, int age) {
	this.classNumber = classNumber;
	this.name = name;
	this.age = age;
}
// 메소드부
@Override
public String toString() { // 출력형태를 만들어주는 메소드
// TODO Auto-generated method stub
return "번호: "+classNumber+" / 이름: "+name+" / 나이: "+age;
}
public int getClassNumber() {
return classNumber;
}
public void setClassNumber(int classNumber) {
	this.classNumber = classNumber;		
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public int getAge() {
	return age;
}
public void setAge(int age) {
	this.age = age;
}
}

--------------------------------------------------------------------------------


// StudentController 클래스

System.out.println("------- ArrayList 객체데이터 사용 -------");
		
// ArrayList 생성
ArrayList list = new ArrayList();


// 리스트에 Student 객체 추가
//ArrayList는 Student의 객체의 주소를 담아서 사용한다
		
// 객체를 생성하여 리스트에서 주소를 저장해서 사용함
list.add(new Student(20012,"홍길동",20)); // Student 형태 공간만들어서 데이터 담겠다
list.add(new Student(20011,"김길동",30));
list.add(new Student(20013,"고길동",20));
		
	/* 리스트 데이터 확인
	 * - 객체 이름만을 이용해서 사용할 경우 객체의 주소를 사용하게 됨
	 * - 객체 이름만으로 출력하면 주소값이 출력됨
	 * - 객체 내부 실제 데이터를 출력하고 싶은 경우
	 * 	- 객체 내부에 toString 메소드를 오버라이딩해주면 됨
	 *	 - toString() 메소드는 원래 Object의 메소드
	 */		
		

System.out.println(list);
//Student 클래스 안에 toString => 출력형식 만들어줌 
//toString -> 자기안의 필드를 출력해주는 메소드
//이후로는 Systm.out.println이 알아서 list만 적어도 list.toString 실행해준다.
// 원래는 toString 없으면 객체의 주소값을 출력함

System.out.println(list.get(0));
System.out.println(((Student)list.get(0)).getName());
System.out.println(((Student)list.get(0)).toString());

// 리스트, 즉 컬렉션의 주소를 따라갔을 때 객체가 있을때에는 그곳에 다양한 기능이 있으나 그 공간이 어떤 공간인지 알 방법이 없음
// 그 공간이 어떤 공간인지 알려줘야한다. 다운캐스팅, 강제 형변환

--------------------------------------------------------------------------------

하지만 이렇게 일일이 다운캐스팅, 강제형변환을 해주는 것은 너무 귀찮다
-> ArrayList는 원래 제네릭 클래스임

객체를 생성할때 타입을 Student로 하면 일일이 다운캐스팅 해주지 않아도 된다.
ArrayList<Student> list = new ArrayList<Student>();
(같은 클래스만 담을 수 있음)

System.out.println(list.get(0));	// Student 클래스의 toString() 메소드 반환값 출력
System.out.println(list.get(1));	// Student 클래스의 toString() 메소드 반환값 출력
System.out.println(list.get(2));	// Student 클래스의 toString() 메소드 반환값 출력

--------------------------------------------------------------------------------

// 반복문 사용

	for(int i=0; i<list.size(); i++) {
	System.out.println(list.get(i).getClassNumber()+"번 학생의 이름은 "
	+list.get(i).getName()+"이고, 나이는 "
	+list.get(i).getAge()+"살 입니다.");
	}

	/*
	 * 20012번 학생의 이름은 홍길동이고, 나이는 20살 입니다.
	 * 20011번 학생의 이름은 김길동이고, 나이는 30살 입니다.
	 * 20013번 학생의 이름은 고길동이고, 나이는 20살 입니다.
	 */
	
// 리스트 데이터 삽입
list.add(2, new Student(20014,"최길동",28));
System.out.println(list); // [번호: 20012 / 이름: 홍길동 / 나이: 20, 번호: 20011 / 이름: 김길동 / 나이: 30, 번호: 20014 / 이름: 최길동 / 나이: 28, 번호: 20013 / 이름: 고길동 / 나이: 20]
System.out.println(list.get(2));

// 리스트 데이터 수정
list.set(1, new Student(20015,"이길동",33));
System.out.println(list); // [번호: 20012 / 이름: 홍길동 / 나이: 20, 번호: 20015 / 이름: 이길동 / 나이: 33, 번호: 20014 / 이름: 최길동 / 나이: 28, 번호: 20013 / 이름: 고길동 / 나이: 20]
		
// 리스트 내부 객체 멤버 필드 수정
list.get(0).setAge(21);
System.out.println(list); // [번호: 20012 / 이름: 홍길동 / 나이: 21, 번호: 20015 / 이름: 이길동 / 나이: 33, 번호: 20014 / 이름: 최길동 / 나이: 28, 번호: 20013 / 이름: 고길동 / 나이: 20]

// 리스트 내 특정 객체 삭제
list.remove(2);
System.out.println(list); // [번호: 20012 / 이름: 홍길동 / 나이: 21, 번호: 20015 / 이름: 이길동 / 나이: 33, 번호: 20013 / 이름: 고길동 / 나이: 20]
		
// 리스트 내 모든 데이터 삭제
list.clear();
System.out.println(list); // []

--------------------------------------------------------------------------------

ArrayList 객체데이터 정렬

public void method02() {
System.out.println("------- ArrayList 객체데이터 정렬 -------");

// ArrayList 생성
ArrayList<Student>list = new ArrayList<Student>();

// 리스트에 Studnet 객체 추가
list.add(new Student(20012,"홍길동",20));	
list.add(new Student(20014,"이길동",27));
list.add(new Student(20010,"고길동",34));
list.add(new Student(20015,"최길동",29));
list.add(new Student(20011,"김길동",45));
		
// 리스트 전체 내용 출력
System.out.println(list);
	
/* 리스트에 객체를 저장할 경우 기본적인 방법으로는 정렬이 안됨
 * - Collections.sort() 메소드가 정렬을 위한 기준을 찾을 수 없기 때문
 * - Comparable 인터페이스에 있는 comparTo() 메소드를 오버라이딩(재정의) 해서 사용
 * 
 */
		
Collections.sort(list); // 정렬 기준을 몰라서 오류 발생
-> 따라서
Student 클래스에 가서 정렬 기준을 정해줘야 한다


* 지금부터는 Student Class

먼저 Comparable 인터페이스를 구현해줘야 한다
public class Student implements Comparable{
Comparable 인터페이스의 메소드인 compareTo를 오버라이딩 해줘야 함

	@Override
	public int compareTo(Object o) {
	// 오름차순
	// this 클래스의 데이터가 매개변수 데이터보다 큰 경우  : 1 (양수)
	// this 클래스의 데이터가 매개변수 데이터보다 작은 경우 : -1 (음수)
	// 같은 경우 : 0
	
	//내가 가지고 있는 classNumber와 다른 객체(Student 클래스인)의 classNumber를 비교한다
	//Object는 최상위 클래스이기 때문에 자식 클래스의 멤버를 참조하기 위해서는 다운캐스팅 필요

	if(this.classNumber > ((Student)o).classNumber) {
		return 1;
	} else if(this.classNumber < ((Student)o).classNumber) {
		return -1;
	} else
		return 0;
	(* 다시 StudentController 가서 
	Collections.sort(list); 작성하면 오류뜨지 않고 오름차순으로 정렬됨) 
	
	//문자열 비교는
	//return this.name.compareTo(((Student)o).name);
	// [번호: 20010 / 이름: 고길동 / 나이: 34, 번호: 20011 / 이름: 김길동 / 나이: 45, 번호: 20014 / 이름: 이길동 / 나이: 27, 번호: 20015 / 이름: 최길동 / 나이: 29, 번호: 20012 / 이름: 홍길동 / 나이: 20]

	// 번호로 정렬 return this.classNumber - ((Student)o).classNumber;
	// 나이로 정렬 return this.age - ((Student)o).age;
	

	// 내림차순 (혹은 오름차순으로 정렬하고 Collection.reverse(list);)
	// this 클래스의 데이터가 매개변수 데이터보다 큰 경우 : -1 (음수)
	// this 클래스의 데이터가 매개변수 데이터보다 작은 경우 : 1 (양수)
	// 같은 경우 : 0


	// 번호로 정렬 return ((Student)o).classNumber - this.classNumber;
	// 나이로 정렬 return ((Student)o).age - this.age;
}



	
